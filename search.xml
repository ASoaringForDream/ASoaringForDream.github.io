<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue自定义指令，简单实现图片懒加载</title>
      <link href="/2022/07/16/vue-zi-ding-yi-zhi-ling-jian-dan-shi-xian-tu-pian-lan-jia-zai/"/>
      <url>/2022/07/16/vue-zi-ding-yi-zhi-ling-jian-dan-shi-xian-tu-pian-lan-jia-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue自定义指令，简单实现图片懒加载"><a href="#Vue自定义指令，简单实现图片懒加载" class="headerlink" title="Vue自定义指令，简单实现图片懒加载"></a>Vue自定义指令，简单实现图片懒加载</h1><p>​    这篇文章通过vue的自定义指令简单的实现一个图片懒加载的插件。</p><h3 id="什么是插件？"><a href="#什么是插件？" class="headerlink" title="什么是插件？"></a>什么是插件？</h3><p>插件通常用来为 Vue 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种：</p><ol><li>添加全局方法或者 property。如：<a href="https://github.com/karol-f/vue-custom-element">vue-custom-element</a></li><li>添加全局资源：指令/过滤器/过渡等。如 <a href="https://github.com/vuejs/vue-touch">vue-touch</a></li><li>通过全局混入来添加一些组件选项。如 <a href="https://github.com/vuejs/vue-router">vue-router</a></li><li>添加 Vue 实例方法，通过把它们添加到 <code>Vue.prototype</code> 上实现。</li><li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能。如 vue-router</li></ol><h3 id="编写插件"><a href="#编写插件" class="headerlink" title="编写插件"></a>编写插件</h3><p>​    <code>vue</code>插件的实现应该暴露一个 <code>install</code> 方法。这个方法的第一个参数是 <code>Vue</code> 构造器，第二个参数是一个可选的参数对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">MyPlugin<span class="token punctuation">.</span><span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 1. 添加全局方法或property</span>  Vue<span class="token punctuation">.</span><span class="token function-variable function">myGlobalMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 逻辑...</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 2. 添加全局资源</span>  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">bind</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 逻辑...</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 3. 注入组件选项</span>  Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 逻辑...</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 4. 添加实例方法</span>  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$myMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">methodOptions</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 逻辑...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写图片懒加载插件"><a href="#编写图片懒加载插件" class="headerlink" title="编写图片懒加载插件"></a>编写图片懒加载插件</h3><p>​    这里我们实现图片懒加载是通过一个指令，所以，我们要在全局中注册一个自定义指令。所以，我们的代码基本结构是这样的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> LazyLoad <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'lazy'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//代码逻辑...</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在绑定v-lazy指令后做一些初始化操作"><a href="#在绑定v-lazy指令后做一些初始化操作" class="headerlink" title="在绑定v-lazy指令后做一些初始化操作"></a>在绑定v-lazy指令后做一些初始化操作</h3><p>​    我们要对绑定v-lazy的对象绑定初始化的图像资源，真实的图像资源。我们在bind钩子中做初始化操作。如果不熟悉vue自定义指令的话，请参考[Vue自定义指令](<a href="https://cn.vuejs.org/v2/guide/custom-directive.html#ad">自定义指令 — Vue.js (vuejs.org)</a>)。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> LazyLoad <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'lazy'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// data-src储存图片真实src</span>    el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'data-src'</span><span class="token punctuation">,</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置src为默认的loading图</span>    el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>default<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">//代码逻辑...</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="监听滚动事件"><a href="#监听滚动事件" class="headerlink" title="监听滚动事件"></a>监听滚动事件</h3><p>​    我们要对绑定v-lazy的元素监听scroll事件，当元素滚动到可视区域后，将图片的src更改为真实的src，加载真实图片。功能实现应该在inserted钩子中。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> LazyLoad <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'lazy'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// data-src储存图片真实src</span>    el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'data-src'</span><span class="token punctuation">,</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置src为默认的loading图</span>    el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>default<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        LazyLoad<span class="token punctuation">.</span><span class="token function">listenerScroll</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//监听scroll事件</span>  <span class="token function">listenerScroll</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">////如果图片本身就处于可视化区域里</span>    LazyLoad<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span>LazyLoad<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//加载真实图片</span>  <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">const</span> viewWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>  <span class="token keyword">const</span> viewHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//图片出现在可视化区域</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>top <span class="token operator">-</span> viewHeight <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> bottom <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left <span class="token operator">-</span> viewWidth <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>  right <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            el<span class="token punctuation">.</span>src <span class="token operator">=</span> el<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src<span class="token punctuation">;</span>        el<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'data-src'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>​    scroll事件是一个密集触发的一个事件，为了优化代码的性能，我们可以为该事件添加一个节流操作。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> LazyLoad <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'lazy'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// data-src储存图片真实src</span>          el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'data-src'</span><span class="token punctuation">,</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// console.log(el.dataset.src)</span>          <span class="token comment">// 设置src为默认的loading图</span>          el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>default<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          LazyLoad<span class="token punctuation">.</span><span class="token function">listenerScroll</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>options<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//监听scroll事件</span><span class="token function">listenerScroll</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  delay <span class="token operator">=</span> delay <span class="token operator">?</span> delay <span class="token operator">:</span> <span class="token number">300</span>  <span class="token keyword">let</span> handler <span class="token operator">=</span> LazyLoad<span class="token punctuation">.</span><span class="token function">throttle</span><span class="token punctuation">(</span>LazyLoad<span class="token punctuation">.</span>load<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// console.log(handler)</span>  <span class="token comment">//如果图片本身就处于可视化区域里</span>  LazyLoad<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">handler</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//加载真实图片</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> viewWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>  <span class="token keyword">const</span> viewHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left <span class="token punctuation">&#125;</span> <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//图片出现在可视化区域</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>top <span class="token operator">-</span> viewHeight <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> bottom <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left <span class="token operator">-</span> viewWidth <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>  right <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      el<span class="token punctuation">.</span>src <span class="token operator">=</span> el<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src<span class="token punctuation">;</span>      el<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'data-src'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 节流</span><span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer<span class="token punctuation">;</span>  <span class="token keyword">let</span> prev<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> curr <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prev<span class="token punctuation">)</span> prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curr <span class="token operator">-</span> prev <span class="token operator">></span> delay<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      prev <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      prev <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay <span class="token operator">-</span> curr <span class="token operator">+</span> prev <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>测试结果如下：</p><p><img src="/2022/07/16/vue-zi-ding-yi-zhi-ling-jian-dan-shi-xian-tu-pian-lan-jia-zai/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C1.gif"></p><h3 id="滚动监听优化之IntersectionObserver"><a href="#滚动监听优化之IntersectionObserver" class="headerlink" title="滚动监听优化之IntersectionObserver"></a>滚动监听优化之IntersectionObserver</h3><p>最近看到了一个非常好用的API——IntersectionObserver，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API">MDN地址</a>。这个 提供了一种异步检测目标元素与祖先元素或 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Viewport">viewport</a> 相交情况变化的方法。我们现在来使用这个API代替监听scroll事件判断图片是否出现在可视化区域中。</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">const LazyLoad &#x3D; &#123;  &#x2F;&#x2F;存放IntersectionObserver  io: null,  &#x2F;&#x2F;注册install方法  install(Vue, options) &#123;      Vue.directive(&#39;lazy&#39;, &#123;        bind(el, binding) &#123;          &#x2F;&#x2F; data-src储存图片真实src          el.setAttribute(&#39;data-src&#39;, binding.value);          &#x2F;&#x2F; 设置src为默认的loading图          el.setAttribute(&#39;src&#39;, options.default);        &#125;,        inserted(el) &#123;             &#x2F;&#x2F;判断当前浏览器是否兼容IntersectionObserver        if (&#39;IntersectionObserver&#39; in window) &#123;          LazyLoad.observe(el);        &#125; else &#123;          LazyLoad.listenerScroll(el,options.delay);        &#125;        &#125;,      &#125;)  &#125;,&#x2F;&#x2F;利用IntersectionObserver监听图片observe(el)&#123;    if (LazyLoad.io) &#123;      LazyLoad.io.observe(el);    &#125; else &#123;      LazyLoad.io &#x3D; new IntersectionObserver(entries &#x3D;&gt; &#123;        entries.forEach((item) &#x3D;&gt; &#123;          if(item.isIntersecting) &#123;            item.target.src &#x3D; item.target.dataset.src;            item.target.removeAttribute(&#39;data-src&#39;);            LazyLoad.io.unobserve(item.target);          &#125;        &#125;)      &#125;);      LazyLoad.io.observe(el);    &#125;&#125;,&#x2F;&#x2F;监听scroll事件listenerScroll(el,delay) &#123;  delay &#x3D; delay ? delay : 300  let handler &#x3D; LazyLoad.throttle(LazyLoad.load, delay);  &#x2F;&#x2F;如果图片本身就处于可视化区域里  LazyLoad.load(el);  window.addEventListener(&#39;scroll&#39;,() &#x3D;&gt; &#123;    handler(el)  &#125;);&#125;,&#x2F;&#x2F;加载真实图片load(el) &#123;  const viewWidth &#x3D; window.innerWidth || document.documentElement.clientWidth;  const viewHeight &#x3D; window.innerHeight || document.documentElement.clientHeight;  const &#123; top, right, bottom, left &#125; &#x3D; el.getBoundingClientRect();  &#x2F;&#x2F;图片出现在可视化区域  if(top - viewHeight &lt; 0 &amp;&amp; bottom &gt; 0 &amp;&amp; left - viewWidth &lt; 0 &amp;&amp;  right &gt; 0 )&#123;    if(el.dataset.src)&#123;      el.src &#x3D; el.dataset.src;      el.removeAttribute(&#39;data-src&#39;);    &#125;  &#125;&#125;,&#x2F;&#x2F; 节流throttle(fn, delay) &#123;  let timer;  let prev;  return function (...args) &#123;    let curr &#x3D; Date.now();    let context &#x3D; this;    if (!prev) prev &#x3D; curr;      clearTimeout(timer);    if (curr - prev &gt; delay) &#123;      prev &#x3D; Date.now();      fn.apply(context, args);      clearTimeout(timer);      return;    &#125;    timer &#x3D; setTimeout(function () &#123;      prev &#x3D; Date.now();      timer &#x3D; null;      fn.apply(context, args);    &#125;, delay - curr + prev );  &#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    到这里，图片懒加载的插件就已经完成了，最后我们只需要向外暴露出LazyLoad对象，然后再Vue项目中调用Vue.use(LazyLoad)就可以使用啦。亲测可用。由于我是第一次尝试编写插件，如果有小伙伴们发现问题，欢迎留言与评论</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 自定义指令 </tag>
            
            <tag> 图片懒加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析snobbdom源码，进一步了解虚拟dom和diff算法</title>
      <link href="/2022/07/14/qian-xi-snobbdom-yuan-ma-liao-jie-xu-ni-dom-he-diff-suan-fa/"/>
      <url>/2022/07/14/qian-xi-snobbdom-yuan-ma-liao-jie-xu-ni-dom-he-diff-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="浅析snobbdom源码，进一步了解虚拟dom和diff算法"><a href="#浅析snobbdom源码，进一步了解虚拟dom和diff算法" class="headerlink" title="浅析snobbdom源码，进一步了解虚拟dom和diff算法"></a>浅析snobbdom源码，进一步了解虚拟dom和diff算法</h1><p>snobbdom的源码地址：<a href="https://github.com/snabbdom/snabbdom">snobbdom</a></p><h3 id="为什么读snobbdom？"><a href="#为什么读snobbdom？" class="headerlink" title="为什么读snobbdom？"></a>为什么读snobbdom？</h3><ol><li>snobbdom是一个VirtualDOM实现。虚拟dom是现在非常流行的前端技术，我们最常使用的React和Vue都运用了这项技术。而且Vue本身就是基于snobbdom实现的。</li><li>snobbdom相比于Vue的虚拟dom算法来说，代码行数比较少，逻辑清晰，读起来更轻松。</li><li>更进一步理解虚拟dom和diff算法，帮助你掌握Vue/React前端框架</li></ol><h3 id="怎么读snobbdom？"><a href="#怎么读snobbdom？" class="headerlink" title="怎么读snobbdom？"></a>怎么读snobbdom？</h3><p>​    其实snobbdom是核心代码非常少，最重要的api有：vnode，toVnode，h，init四个函数。我们就对这四个函数的源码进行解读。snobbdom的源码是通过ts编写的，这里我们对打包后的生成的js代码进行解析。</p><h3 id="什么是虚拟dom？"><a href="#什么是虚拟dom？" class="headerlink" title="什么是虚拟dom？"></a>什么是虚拟dom？</h3><p>​    虚拟dom：用JavaScript的对象描述Dom的层次结构，Dom的一切属性对在JavaScript对象中有相应的属性。</p><p>​    例如如下HTML片段</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>        这是一个标题    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>菠萝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    那么与之相对应的JavaScript对象可能是这样的(真正的虚拟dom可能有些不同，但是思想是一样的)：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token string-property property">"sel"</span> <span class="token operator">:</span> <span class="token string">"div"</span><span class="token punctuation">,</span>    <span class="token string-property property">"data"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">"class"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string-property property">"box"</span> <span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string-property property">"children"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token string-property property">"sel"</span> <span class="token operator">:</span> <span class="token string">"h3"</span><span class="token punctuation">,</span>            <span class="token string-property property">"data"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string-property property">"text"</span> <span class="token operator">:</span> <span class="token string">"这是一个标题"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token string-property property">"sel"</span> <span class="token operator">:</span> <span class="token string">"h3"</span><span class="token punctuation">,</span>            <span class="token string-property property">"data"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string-property property">"children"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token string-property property">"sel"</span> <span class="token operator">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span>            <span class="token string-property property">"data"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string-property property">"text"</span> <span class="token operator">:</span> <span class="token string">"苹果"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>                    <span class="token string-property property">"sel"</span> <span class="token operator">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span>            <span class="token string-property property">"data"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string-property property">"text"</span> <span class="token operator">:</span> <span class="token string">"香蕉"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>                    <span class="token string-property property">"sel"</span> <span class="token operator">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span>            <span class="token string-property property">"data"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string-property property">"text"</span> <span class="token operator">:</span> <span class="token string">"菠萝"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="什么是diff算法？"><a href="#什么是diff算法？" class="headerlink" title="什么是diff算法？"></a>什么是diff算法？</h3><p>​    diff算法，diff就是differences(不同)的缩写，这个算法是作用在虚拟dom上的。</p><p>​    比如我们现在用一个新的虚拟dom对象：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token string-property property">"sel"</span> <span class="token operator">:</span> <span class="token string">"div"</span><span class="token punctuation">,</span>    <span class="token string-property property">"data"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">"class"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string-property property">"box"</span> <span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string-property property">"children"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token string-property property">"sel"</span> <span class="token operator">:</span> <span class="token string">"h3"</span><span class="token punctuation">,</span>            <span class="token string-property property">"data"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string-property property">"text"</span> <span class="token operator">:</span> <span class="token string">"这是一个标题"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token string-property property">"sel"</span> <span class="token operator">:</span> <span class="token string">"h3"</span><span class="token punctuation">,</span>            <span class="token string-property property">"data"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string-property property">"children"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token string-property property">"sel"</span> <span class="token operator">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span>            <span class="token string-property property">"data"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string-property property">"text"</span> <span class="token operator">:</span> <span class="token string">"苹果"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>                    <span class="token string-property property">"sel"</span> <span class="token operator">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span>            <span class="token string-property property">"data"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string-property property">"text"</span> <span class="token operator">:</span> <span class="token string">"香蕉"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>                    <span class="token string-property property">"sel"</span> <span class="token operator">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span>            <span class="token string-property property">"data"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string-property property">"text"</span> <span class="token operator">:</span> <span class="token string">"菠萝"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>                    <span class="token string-property property">"sel"</span> <span class="token operator">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span>            <span class="token string-property property">"data"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string-property property">"text"</span> <span class="token operator">:</span> <span class="token string">"火龙果"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    那么我们发现新的虚拟dom与之前我们的旧的虚拟dom的差别就在于多了一个li标签。那么作用于真实dom上，我们要进行的操作显然只需要插入一个li标签就好了。而不是删除之前所有的dom元素，然后创建所有新的dom元素。所以，diff算法是对新老虚拟dom的进行的一个精细化比较，尽量的最小化我们的更新操作，从而优化渲染效率。</p><h3 id="vnode函数"><a href="#vnode函数" class="headerlink" title="vnode函数"></a>vnode函数</h3><p>​    snobbdom的vnode函数非常简单，就是单纯的返回一个JavaScript的对象。</p><p>​    代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">vnode</span><span class="token punctuation">(</span><span class="token parameter">sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> elm</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> data <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> data<span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> elm<span class="token punctuation">,</span> key <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    其中，sel是标签名，字符串类型，data是dom属性，对象类型，children是子元素列表，数组类型，text是文本内容，字符串类型，elm是对应的真实dom对象，key值相当于一个专属id。</p><h3 id="toVnode函数"><a href="#toVnode函数" class="headerlink" title="toVnode函数"></a>toVnode函数</h3><p>​    toVnode函数的作用是将真实Dom转化为虚拟dom，最终返回一个vnode函数的调用结果。</p><p>​    具体代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//引入对svg元素的处理函数</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> addNS <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./h"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> vnode <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./vnode"</span><span class="token punctuation">;</span><span class="token comment">//引入document的操作的封装函数</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> htmlDomApi <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./htmldomapi"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">toVNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> domApi</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> api <span class="token operator">=</span> domApi <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> domApi <span class="token operator">:</span> htmlDomApi<span class="token punctuation">;</span>    <span class="token keyword">let</span> text<span class="token punctuation">;</span>    <span class="token comment">//如果当前节点是一个元素节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span><span class="token function">isElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//初始化vnode对象的基本属性</span>        <span class="token keyword">const</span> id <span class="token operator">=</span> node<span class="token punctuation">.</span>id <span class="token operator">?</span> <span class="token string">"#"</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>id <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> cn <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> c <span class="token operator">=</span> cn <span class="token operator">?</span> <span class="token string">"."</span> <span class="token operator">+</span> cn<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> sel <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">tagName</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> id <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token keyword">const</span> attrs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> datasets <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> name<span class="token punctuation">;</span>        <span class="token keyword">let</span> i<span class="token punctuation">,</span> n<span class="token punctuation">;</span>        <span class="token keyword">const</span> elmAttrs <span class="token operator">=</span> node<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span>        <span class="token keyword">const</span> elmChildren <span class="token operator">=</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> elmAttrs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            name <span class="token operator">=</span> elmAttrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeName<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"d"</span> <span class="token operator">&amp;&amp;</span>                name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"a"</span> <span class="token operator">&amp;&amp;</span>                name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"t"</span> <span class="token operator">&amp;&amp;</span>                name<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"a"</span> <span class="token operator">&amp;&amp;</span>                name<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                datasets<span class="token punctuation">[</span>name<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> elmAttrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeValue <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!==</span> <span class="token string">"id"</span> <span class="token operator">&amp;&amp;</span> name <span class="token operator">!==</span> <span class="token string">"class"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                attrs<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> elmAttrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> elmChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">toVNode</span><span class="token punctuation">(</span>elmChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> domApi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span>attrs <span class="token operator">=</span> attrs<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>datasets<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span>datasets <span class="token operator">=</span> datasets<span class="token punctuation">;</span>        <span class="token comment">//对svg元素的处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"s"</span> <span class="token operator">&amp;&amp;</span>            sel<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"v"</span> <span class="token operator">&amp;&amp;</span>            sel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"g"</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>sel<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">||</span> sel<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"."</span> <span class="token operator">||</span> sel<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">addNS</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> sel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//返回vnode函数的调用</span>        <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//节点是文本节点</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span><span class="token function">isText</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        text <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">getTextContent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回vnode函数的调用</span>        <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//节点是注释节点</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span><span class="token function">isComment</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        text <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">getTextContent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回vnode函数的调用</span>        <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//其他节点类型</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//返回vnode函数的调用</span>        <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    上述代码中引入的htmlDomApi是对document操作的封装并统一暴露的一个对象，代码在同一目录的htmldomapi文件中，代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">tagName<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tagName<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createElementNS</span><span class="token punctuation">(</span><span class="token parameter">namespaceURI<span class="token punctuation">,</span> qualifiedName<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createElementNS</span><span class="token punctuation">(</span>namespaceURI<span class="token punctuation">,</span> qualifiedName<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createComment</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createComment</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token parameter">parentNode<span class="token punctuation">,</span> newNode<span class="token punctuation">,</span> referenceNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span> referenceNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> child</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> child</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">parentNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">nextSibling</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">tagName</span><span class="token punctuation">(</span><span class="token parameter">elm</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> elm<span class="token punctuation">.</span>tagName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">setTextContent</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> text<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getTextContent</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isElement</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isText</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isComment</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isDocumentFragment</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> htmlDomApi <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    createElement<span class="token punctuation">,</span>    createElementNS<span class="token punctuation">,</span>    createTextNode<span class="token punctuation">,</span>    createDocumentFragment<span class="token punctuation">,</span>    createComment<span class="token punctuation">,</span>    insertBefore<span class="token punctuation">,</span>    removeChild<span class="token punctuation">,</span>    appendChild<span class="token punctuation">,</span>    parentNode<span class="token punctuation">,</span>    nextSibling<span class="token punctuation">,</span>    tagName<span class="token punctuation">,</span>    setTextContent<span class="token punctuation">,</span>    getTextContent<span class="token punctuation">,</span>    isElement<span class="token punctuation">,</span>    isText<span class="token punctuation">,</span>    isComment<span class="token punctuation">,</span>    isDocumentFragment<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="h函数（生成vnode节点）"><a href="#h函数（生成vnode节点）" class="headerlink" title="h函数（生成vnode节点）"></a>h函数（生成vnode节点）</h3><p>​    h函数是用来生成vnode节点，这里举个栗子。</p><p>​    如果我们采用如下方式调用h函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'百度一下'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    那么返回结果就是这样的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token string-property property">"sel"</span><span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>    <span class="token string-property property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">"http://www.baidu.com"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string-property property">"text"</span><span class="token operator">:</span> <span class="token string">"百度一下"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    与之相对应的真实dom就是这样的：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    其实很多框架中都间接或者直接的存在h函数，据说它的愿意是 <code>hyperscript</code>，意思是创造 <code>HyperText（超文本）</code> 的 <code>JavaScript</code>。根据我们刚才的vnode函数，我们发现其实vnode只是把各种参数统一成了一个对象，本身并没有进行任何的操作。那么我们如果想生成一个vnode节点，就需要h函数接受相应的参数并进行处理。</p><p>​    h函数源码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token parameter">sel<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> children<span class="token punctuation">;</span>    <span class="token keyword">let</span> text<span class="token punctuation">;</span>    <span class="token keyword">let</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            data <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            children <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//primitive函数用来判断传入值是否为String或者是Number类型</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">primitive</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            text <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>sel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            children <span class="token operator">=</span> <span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            children <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">primitive</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            text <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span>sel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            children <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            data <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>children <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">primitive</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                children<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">vnode</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//处理svg元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"s"</span> <span class="token operator">&amp;&amp;</span>        sel<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"v"</span> <span class="token operator">&amp;&amp;</span>        sel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"g"</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>sel<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">||</span> sel<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"."</span> <span class="token operator">||</span> sel<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addNS</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> sel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    通过我们的阅读不难发现，h函数接受三个参数，第一个是标签名，第二个是data信息，第三个是子元素列表。最终返回一个vnode函数的调用。is是snobbdom编写的一个辅助函数，代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> array <span class="token operator">=</span> Array<span class="token punctuation">.</span>isArray<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">primitive</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> s <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token operator">||</span>        <span class="token keyword">typeof</span> s <span class="token operator">===</span> <span class="token string">"number"</span> <span class="token operator">||</span>        s <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token operator">||</span>        s <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="init-js文件与init函数"><a href="#init-js文件与init函数" class="headerlink" title="init.js文件与init函数"></a>init.js文件与init函数</h3><p>​    init函数的作用就是实现diff算法，在该函数中，有定义了很多的高阶函数。init函数在文件init.js中，init.js也是snobbdom中代码量最大的一个文件，但其实他也只有三百多行代码。</p><p>​    接下来我们阅读一下init.js文件中的代码。首先是一些工具辅助函数:</p><h5 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//引入vnode函数</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> vnode <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./vnode"</span><span class="token punctuation">;</span><span class="token comment">//引入辅助函数</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> is <span class="token keyword">from</span> <span class="token string">"./is"</span><span class="token punctuation">;</span><span class="token comment">//引入对document操作的封装对象htmlDomApi</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> htmlDomApi <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./htmldomapi"</span><span class="token punctuation">;</span><span class="token comment">//传入值是undefined</span><span class="token keyword">function</span> <span class="token function">isUndef</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//传入值不是undefined</span><span class="token keyword">function</span> <span class="token function">isDef</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建了一个空的vnode对象</span><span class="token keyword">const</span> emptyNode <span class="token operator">=</span> <span class="token function">vnode</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断两个vnode是否相似，注意这里的判断依据中包含key值</span><span class="token keyword">function</span> <span class="token function">sameVnode</span><span class="token punctuation">(</span><span class="token parameter">vnode1<span class="token punctuation">,</span> vnode2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> _a<span class="token punctuation">,</span> _b<span class="token punctuation">;</span>    <span class="token keyword">const</span> isSameKey <span class="token operator">=</span> vnode1<span class="token punctuation">.</span>key <span class="token operator">===</span> vnode2<span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token keyword">const</span> isSameIs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_a <span class="token operator">=</span> vnode1<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> _a <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">:</span> _a<span class="token punctuation">.</span>is<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_b <span class="token operator">=</span> vnode2<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> _b <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">:</span> _b<span class="token punctuation">.</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> isSameSel <span class="token operator">=</span> vnode1<span class="token punctuation">.</span>sel <span class="token operator">===</span> vnode2<span class="token punctuation">.</span>sel<span class="token punctuation">;</span>    <span class="token keyword">return</span> isSameSel <span class="token operator">&amp;&amp;</span> isSameKey <span class="token operator">&amp;&amp;</span> isSameIs<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @todo Remove this function when the document fragment is considered stable. */</span><span class="token comment">//document片段不被支持时的报错</span><span class="token keyword">function</span> <span class="token function">documentFragmentIsNotSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"The document fragment is not supported on this platform."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断是否为元素节点</span><span class="token keyword">function</span> <span class="token function">isElement</span><span class="token punctuation">(</span><span class="token parameter">api<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> api<span class="token punctuation">.</span><span class="token function">isElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断是否为document片段</span><span class="token keyword">function</span> <span class="token function">isDocumentFragment</span><span class="token punctuation">(</span><span class="token parameter">api<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> api<span class="token punctuation">.</span><span class="token function">isDocumentFragment</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将key值都存入一个对象map中，这个函数将在diff算法中被使用</span><span class="token keyword">function</span> <span class="token function">createKeyToOldIdx</span><span class="token punctuation">(</span><span class="token parameter">children<span class="token punctuation">,</span> beginIdx<span class="token punctuation">,</span> endIdx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> _a<span class="token punctuation">;</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> beginIdx<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> endIdx<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token punctuation">(</span>_a <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> _a <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">:</span> _a<span class="token punctuation">.</span>key<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> map<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化钩子</span><span class="token keyword">const</span> hooks <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"create"</span><span class="token punctuation">,</span>    <span class="token string">"update"</span><span class="token punctuation">,</span>    <span class="token string">"remove"</span><span class="token punctuation">,</span>    <span class="token string">"destroy"</span><span class="token punctuation">,</span>    <span class="token string">"pre"</span><span class="token punctuation">,</span>    <span class="token string">"post"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    下面的内容都出现在init函数，代码太长，我们分开来看。首先，我们来看init函数的返回值patch函数。</p><h5 id="patch函数："><a href="#patch函数：" class="headerlink" title="patch函数："></a>patch函数：</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> i<span class="token punctuation">,</span> elm<span class="token punctuation">,</span> parent<span class="token punctuation">;</span>        <span class="token keyword">const</span> insertedVnodeQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//钩子事件的处理</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            cbs<span class="token punctuation">.</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果旧的vnode节点是一个元素节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isElement</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> oldVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//将旧节点赋值为一个空的vnode节点</span>            oldVnode <span class="token operator">=</span> <span class="token function">emptyNodeAt</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//如果旧的vnode节点是一个document片段</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDocumentFragment</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> oldVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//将旧节点赋值为一个空的vnode document片段</span>            oldVnode <span class="token operator">=</span> <span class="token function">emptyDocumentFragmentAt</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//如果新旧vnode相似</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//调用patchVnode函数</span>            <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//如果新旧vnode不相似</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            elm <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">;</span>            parent <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">parentNode</span><span class="token punctuation">(</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//插入新的vnode</span>                api<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> api<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span>elm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//删除旧的vnode</span>                <span class="token function">removeVnodes</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token punctuation">[</span>oldVnode<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//钩子事件处理</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> insertedVnodeQueue<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            insertedVnodeQueue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>hook<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>insertedVnodeQueue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>post<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            cbs<span class="token punctuation">.</span>post<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> vnode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    init函数返回了patch函数的调用，在patch函数中，我们先是判断了oldVnode是不是一个元素节点，这种情况一般出现在我们第一次挂载元素的过程中，例如在Vue中调用 mount(‘#app’) ,此时，oldVnode就是#app这个元素节点。然后我们进行了新旧节点是否相似的判断，我们发现，只有在相似时，我们才会调用patchVnode函数(接下来会看这个函数)，不相似时，我们直接暴力的插入了新的vnode，删除了旧的vnode。这也就是很多博主上说的，<strong>diff算法只有同一层的节点才会被比对。</strong></p><h5 id="patchVnode函数："><a href="#patchVnode函数：" class="headerlink" title="patchVnode函数："></a>patchVnode函数：</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">patchVnode</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> insertedVnodeQueue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> _a<span class="token punctuation">,</span> _b<span class="token punctuation">,</span> _c<span class="token punctuation">,</span> _d<span class="token punctuation">,</span> _e<span class="token punctuation">,</span> _f<span class="token punctuation">,</span> _g<span class="token punctuation">,</span> _h<span class="token punctuation">;</span>    <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token punctuation">(</span>_a <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> _a <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">:</span> _a<span class="token punctuation">.</span>hook<span class="token punctuation">;</span>    <span class="token punctuation">(</span>_b <span class="token operator">=</span> hook <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> hook <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">:</span> hook<span class="token punctuation">.</span>prepatch<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> _b <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">_b</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>hook<span class="token punctuation">,</span> oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> elm <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> oldCh <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>children<span class="token punctuation">;</span>    <span class="token keyword">const</span> ch <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">;</span>    <span class="token comment">//新旧vnode完全相同，不需要任何操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode <span class="token operator">===</span> vnode<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">//更新update钩子的处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>data <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">||</span>        <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>text <span class="token operator">!==</span> oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span>_c <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> _c <span class="token operator">!==</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">?</span> _c <span class="token operator">:</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>_d <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> _d <span class="token operator">!==</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">?</span> _d <span class="token operator">:</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>update<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            cbs<span class="token punctuation">.</span>update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>_g <span class="token operator">=</span> <span class="token punctuation">(</span>_f <span class="token operator">=</span> <span class="token punctuation">(</span>_e <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> _e <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">:</span> _e<span class="token punctuation">.</span>hook<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> _f <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">:</span> _f<span class="token punctuation">.</span>update<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> _g <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">_g</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>_f<span class="token punctuation">,</span> oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//新vnode不是文本节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//新旧vnode都存在子节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCh <span class="token operator">!==</span> ch<span class="token punctuation">)</span>                <span class="token function">updateChildren</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//新vnode存在子节点，旧vnode不存在子节点</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//旧vnode有text属性</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">//删除text内容</span>                api<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//添加子节点</span>            <span class="token function">addVnodes</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ch<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//旧vnode存在子节点，新vnode不存在子节点</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//删除子节点</span>            <span class="token function">removeVnodes</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oldCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//新旧vnode都不存在子节点，并且旧vnode存在text属性</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//删除text内容</span>            api<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//新vnode时文本节点并且与旧vnode的text不同</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text <span class="token operator">!==</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//删除旧vnode的子节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">removeVnodes</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oldCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//更新vnode的text</span>        api<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">(</span>_h <span class="token operator">=</span> hook <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> hook <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">:</span> hook<span class="token punctuation">.</span>postpatch<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> _h <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">_h</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>hook<span class="token punctuation">,</span> oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    patchVnode函数首先会判断新vnode是不是文本节点，如果不是，则会对新旧vnode的子节点进行一个判断，如果新旧vnode都存在子节点，这种情况最复杂，需要调用updateChildren函数(下一步介绍)，反之，则进行相应的删除和插入子节点即可。如果新vnode是文本节点，则删除旧vnode的子节点，并且更新text内容。</p><h5 id="updateChildren函数"><a href="#updateChildren函数" class="headerlink" title="updateChildren函数"></a>updateChildren函数</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">parentElm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> newCh<span class="token punctuation">,</span> insertedVnodeQueue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> oldStartIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> newStartIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> oldEndIdx <span class="token operator">=</span> oldCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>oldEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> newEndIdx <span class="token operator">=</span> newCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span>newEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> oldKeyToIdx<span class="token punctuation">;</span>    <span class="token keyword">let</span> idxInOld<span class="token punctuation">;</span>    <span class="token keyword">let</span> elmToMove<span class="token punctuation">;</span>    <span class="token keyword">let</span> before<span class="token punctuation">;</span>    <span class="token comment">//当新前小于等于新后并且旧前小于等于旧后</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIdx <span class="token operator">&lt;=</span> oldEndIdx <span class="token operator">&amp;&amp;</span> newStartIdx <span class="token operator">&lt;=</span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断是否为空，进行移位</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartVnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Vnode might have been moved left</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndVnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newStartVnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newEndVnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果新前与旧前相似</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//比较新前与旧前</span>            <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//新前与旧前均+1</span>            oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>            newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果新后与旧后相似</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//比较新后与旧后</span>            <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//新后与旧后均+1</span>            oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>            newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果新后与旧前相似</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Vnode moved right</span>            <span class="token comment">//比较新后与旧前</span>            <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将旧前插入到旧后的后面</span>            api<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> api<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//移位</span>            oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>            newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果新前与旧后相似</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Vnode moved left</span>            <span class="token comment">//比较新前与旧后</span>            <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将旧后插入到旧前之前</span>            api<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> oldEndVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//移位</span>            oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>            newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//生成key对应元素的index列表</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldKeyToIdx <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                oldKeyToIdx <span class="token operator">=</span> <span class="token function">createKeyToOldIdx</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            idxInOld <span class="token operator">=</span> oldKeyToIdx<span class="token punctuation">[</span>newStartVnode<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//如果index列表中不存在当前元素，说明这是一个新增的元素，进行插入操作</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>idxInOld<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// New element</span>                <span class="token comment">//新建元素并插入到旧前之前</span>                api<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> <span class="token function">createElm</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//如果index存在</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                elmToMove <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>idxInOld<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//如果标签不同</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elmToMove<span class="token punctuation">.</span>sel <span class="token operator">!==</span> newStartVnode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//新建元素并插入到旧前之前</span>                    api<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> <span class="token function">createElm</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//如果标签相同</span>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//比较两个元素</span>                    <span class="token function">patchVnode</span><span class="token punctuation">(</span>elmToMove<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//将当前index对应的元素赋值为空，防止重复</span>                    oldCh<span class="token punctuation">[</span>idxInOld<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>                    <span class="token comment">//将元素插入到旧前之前</span>                    api<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> elmToMove<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//移位</span>            newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果最后新vnode还有剩余的子元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newStartIdx <span class="token operator">&lt;=</span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        before <span class="token operator">=</span> newCh<span class="token punctuation">[</span>newEndIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> newCh<span class="token punctuation">[</span>newEndIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elm<span class="token punctuation">;</span>        <span class="token comment">//新增这些子元素</span>        <span class="token function">addVnodes</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> before<span class="token punctuation">,</span> newCh<span class="token punctuation">,</span> newStartIdx<span class="token punctuation">,</span> newEndIdx<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果最后旧vnode还有剩余的子元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartIdx <span class="token operator">&lt;=</span> oldEndIdx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//删除这些子元素</span>        <span class="token function">removeVnodes</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    updateChildren函数作用是更新vnode的子节点，它使用了一个非常巧妙的算法，设立了四个指针，分别指向旧vnode子元素的第一项（旧前），旧vnode子元素的最后一项（旧后），新vnode子元素的第一项（新前），旧vnode子元素的最后一项（新后）。然后分别按照新前与旧前，新后与旧后，新后与旧前，新前与旧后的顺序比较，最后如果全部匹配失败，则遍历寻找，如果继续失败，则说明是新增节点，创建新的节点并插入即可。最后判断新旧vnode的子节点是否还有剩余，进行相应的插入删除操作。</p><p>至此，我们对snobbdom的基本解读就已经结束了。我们可以发现，听起来非常高深的虚拟dom和diff算法原理上其实并没有那么的复杂。当然，虽然Vue中的虚拟dom和diff算法基于snobbdom实现，但是Vue考虑了自己的一些需求，还是存在部分差距的，但是基本的思路和算法大致相同。</p><h3 id="拓展：Vue中Key的作用？"><a href="#拓展：Vue中Key的作用？" class="headerlink" title="拓展：Vue中Key的作用？"></a>拓展：Vue中Key的作用？</h3><p>​    什么是key呢？其实，key是给每一个vnode的唯一id，也是diff的一种优化策略，可以根据key，更准确， 更快的找到对应的vnode节点。</p><p>​    我们先来看使用key的两种情况。</p><p>(1)用时间戳最为key值使得元素强制刷新。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;Comp :key&#x3D;&quot;Date.now()&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(2)使用v-for列表渲染时。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;ul&gt;    &lt;li v-for&#x3D;&quot;item in items&quot; :key&#x3D;&quot;item.id&quot;&gt;        &#123;&#123;item.val&#125;&#125;    &lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    首先看第一种情况，为什么时间戳最为key会使得元素强制刷新。应为以时间戳作为key相当于赋值给元素了一个不会相同的key值。这将会在调用patch函数时，sameVnode()函数的返回值为false，触发更新（同一毫秒内的情况除外）。</p><p>​    再来看第二种情况，vue官网推荐在使用v-for时添加唯一的key值，在vue3中如果不加key值会标红(但是能运行，vscode是这样的)。因为添加keykey优化diff算法的效率。我们看一个例子，</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;  &lt;div&gt;    &lt;p v-for&#x3D;&quot;item in items&quot; :key&#x3D;&quot;item&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;p&gt;  &lt;&#x2F;div&gt;  &lt;script&gt;    const app &#x3D; new Vue(&#123;      el: &#39;#demo&#39;,      data: &#123; items: [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;] &#125;,      mounted () &#123;        setTimeout(() &#x3D;&gt; &#123;           this.items.splice(2, 0, &#39;F&#39;)  &#x2F;&#x2F;        &#125;, 2000);     &#125;   &#125;);  &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1，如果我们没有设置key值</p><p>那么在两秒后插入F的diff过程是这样的</p><p><img src="/2022/07/14/qian-xi-snobbdom-yuan-ma-liao-jie-xu-ni-dom-he-diff-suan-fa/1.png"></p><p>(1)    A与A进行比较，sameVnode返回值为true，进行patchVnode，数据没变，不发生dom操作。</p><p>(2)    B与B进行比较，sameVnode返回值为true，进行patchVnode，数据没变，不发生dom操作。</p><p>(3)    C与F进行比较，sameVnode返回值为true，进行patchVnode，数据改变，发生dom操作。</p><p>(4)    D与C进行比较，sameVnode返回值为true，进行patchVnode，数据改变，发生dom操作。</p><p>(5)    E与D进行比较，sameVnode返回值为true，进行patchVnode，数据改变，发生dom操作。</p><p>(6)    插入E节点。</p><p>总共发生了3次更新，一次插入。</p><p>2，如果我们设置了key值，那么diff过程就变成了这样</p><p><img src="/2022/07/14/qian-xi-snobbdom-yuan-ma-liao-jie-xu-ni-dom-he-diff-suan-fa/2.png"></p><p>(1)    A与A进行比较，sameVnode返回值为true，进行patchVnode，数据没变，不发生dom操作。</p><p>(2)    B与B进行比较，sameVnode返回值为true，进行patchVnode，数据没变，不发生dom操作。</p><p>(3)    C与F进行比较，sameVnode返回值为<strong>false</strong>，进行新后与旧后的比较，</p><p>​        ——E与E进行比较，sameVnode返回值为true，进行patchVnode，数据没变，不发生dom操作。</p><p>(4)    C与F进行比较，sameVnode返回值为<strong>false</strong>，进行新后与旧后的比较，</p><p>​        ——D与D进行比较，sameVnode返回值为true，进行patchVnode，数据没变，不发生dom操作。</p><p>(5)    C与F进行比较，sameVnode返回值为<strong>false</strong>，进行新后与旧后的比较，</p><p>​        ——C与C进行比较，sameVnode返回值为true，进行patchVnode，数据没变，不发生dom操作。</p><p>(6)    插入F节点。</p><p>总共发生了一次插入，0次更新。</p><p>我们可以发现，其实是否设置key值影响的是sameVnode这个函数的调用结果，设置唯一的key值可以优化diff效率，提升算法速度。</p><h5 id="设置key值一定能提高diff效率吗？"><a href="#设置key值一定能提高diff效率吗？" class="headerlink" title="设置key值一定能提高diff效率吗？"></a>设置key值一定能提高diff效率吗？</h5><p>​    我们都阅读过diff算法了，其实diff算法虽然是一个很巧妙的算法，但是他不能囊括所有的情况，也就是说它并不一定可以做到优化diff算法，在有些场景下设置key值并不能起到作用，甚至是可能起到反作用。</p><p>​    看一下官方文档的说明：</p><p>​    <code>key</code> 的特殊 attribute 主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。而使用 key 时，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</p>]]></content>
      
      
      <categories>
          
          <category> 源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 虚拟dom和diff算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3按需自动引入Element-ui</title>
      <link href="/2022/06/28/vue3-an-xu-zi-dong-yin-ru-element-ui/"/>
      <url>/2022/06/28/vue3-an-xu-zi-dong-yin-ru-element-ui/</url>
      
        <content type="html"><![CDATA[<h1 id="vue3按需自动引入Element-ui"><a href="#vue3按需自动引入Element-ui" class="headerlink" title="vue3按需自动引入Element-ui"></a>vue3按需自动引入Element-ui</h1><h2 id="安装element-ui"><a href="#安装element-ui" class="headerlink" title="安装element-ui"></a>安装element-ui</h2><p>​    element-ui官网给出了vue2项目添加element-ui的方式</p><h3 id="下载element-ui"><a href="#下载element-ui" class="headerlink" title="下载element-ui"></a>下载element-ui</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">npm i element-ui -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="引入element-ui"><a href="#引入element-ui" class="headerlink" title="引入element-ui"></a>引入element-ui</h3><h4 id="全局引入"><a href="#全局引入" class="headerlink" title="全局引入"></a>全局引入</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">import Vue from &#39;vue&#39;;import ElementUI from &#39;element-ui&#39;;import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;;import App from &#39;.&#x2F;App.vue&#39;;Vue.use(ElementUI);new Vue(&#123;  el: &#39;#app&#39;,  render: h &#x3D;&gt; h(App)&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="按需引入"><a href="#按需引入" class="headerlink" title="按需引入"></a>按需引入</h4><p>安装插件babel-plugin-component</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">npm install babel-plugin-component -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>引入</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&#123;  &quot;presets&quot;: [[&quot;es2015&quot;, &#123; &quot;modules&quot;: false &#125;]],  &quot;plugins&quot;: [    [      &quot;component&quot;,      &#123;        &quot;libraryName&quot;: &quot;element-ui&quot;,        &quot;styleLibraryName&quot;: &quot;theme-chalk&quot;      &#125;    ]  ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue3使用element-ui"><a href="#vue3使用element-ui" class="headerlink" title="vue3使用element-ui"></a>vue3使用element-ui</h2><p>element-ui目前只支持vue2</p><p>如果希望在vue3中使用element-ui，应使用element-plus插件</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">npm i element-plus -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="引入插件"><a href="#引入插件" class="headerlink" title="引入插件"></a>引入插件</h3><h4 id="全局引入-1"><a href="#全局引入-1" class="headerlink" title="全局引入"></a>全局引入</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">import &#123; createApp &#125; from &#39;vue&#39;import App from &#39;.&#x2F;App.vue&#39;import router from &#39;.&#x2F;router&#39;import store from &#39;.&#x2F;store&#39;import ElementPlus from &#39;element-plus&#39;;import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;;createApp(App).use(store).use(router).use(ElementPlus).mount(&#39;#app&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自动按需引入"><a href="#自动按需引入" class="headerlink" title="自动按需引入"></a>自动按需引入</h4><p>安装插件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">npm install -D unplugin-vue-components unplugin-auto-import<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改vue.config.js文件中</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">const &#123; defineConfig &#125; &#x3D; require(&#39;@vue&#x2F;cli-service&#39;)const AutoImport &#x3D; require(&#39;unplugin-auto-import&#x2F;webpack&#39;)const Components &#x3D; require(&#39;unplugin-vue-components&#x2F;webpack&#39;)const &#123; ElementPlusResolver &#125; &#x3D; require(&#39;unplugin-vue-components&#x2F;resolvers&#39;)module.exports &#x3D; defineConfig(&#123;  transpileDependencies: true,  configureWebpack: &#123;......    plugins: [      AutoImport(&#123;        resolvers: [ElementPlusResolver()],      &#125;),      Components(&#123;        resolvers: [ElementPlusResolver()],      &#125;),    ],  &#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP缓存</title>
      <link href="/2022/05/26/http-huan-cun/"/>
      <url>/2022/05/26/http-huan-cun/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h1><h2 id="什么是HTTP缓存？"><a href="#什么是HTTP缓存？" class="headerlink" title="什么是HTTP缓存？"></a>什么是HTTP缓存？</h2><p>​    http缓存是指，当客户端向服务端第一次发送GET请求时，浏览器会根据HTTP设定的缓存规则，将请求结果存储在浏览器中，当再次发送重复的GET请求时，会优先在浏览器缓存中取得该资源，从而降低服务端压力，加快访问速度。</p><h2 id="HTTP缓存的分类"><a href="#HTTP缓存的分类" class="headerlink" title="HTTP缓存的分类"></a>HTTP缓存的分类</h2><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>​    强制缓存在缓存数据未失效的情况下（即设置的Cache-Control的max-age没有过期或者Expires的缓存时间没有过期），直接从服务器缓存中获取资源，不在向服务端发送任何的请求。http状态码为200。这种方式响应速度最快，性能最高。但是，如果在这期间服务端修改了请求内容，客户端也不会发生更新，因为他并没有向服务端发送请求。这也是我们在开发中经常遇到界面不更新的原因。Ctrl+F5强制刷新，F5刷新可以清除该缓存。</p><table><thead><tr><th align="center">header</th><th align="center">可选值</th><th align="center">优先级</th><th align="center">优缺点</th></tr></thead><tbody><tr><td align="center">Pragma（http1.0）</td><td align="center">no-catch：不直接使用缓存，根据新鲜度进行缓存（协商缓存）</td><td align="center">高</td><td align="center">1，响应头不支持该属性。2，为了兼容http1.0的客户端。3，http1.1已废弃该属性</td></tr><tr><td align="center">Cache-Control（http1.1）</td><td align="center">1，no-catch：不直接使用缓存，根据新鲜度进行缓存。（协商缓存）2，no-store:不使用缓存。3，max-age:强制缓存，设定过期时间</td><td align="center">中</td><td align="center">1，不适用与http1.0。2，响应头和请求头都支持。3，缓存未失效之前，不能获取新的资源</td></tr><tr><td align="center">Expires（http1.0+)</td><td align="center">系统时间</td><td align="center">低</td><td align="center">1，服务器与客户端时间不一致会出现问题。2，缓存未失效之前，不能获取新的资源</td></tr></tbody></table><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>​    当第一次请求时服务器返回的响应头中没有Cache-Control和Expires或者Cache-Control和Expires过期还或者它的属性设置为no-cache时(即不使用强缓存)，那么浏览器第二次请求时就会与服务器进行协商，与服务器端对比判断资源是否进行了修改更新。如果服务器端的资源没有修改，那么就会返回304状态码，告诉浏览器可以使用缓存中的数据，这样就减少了服务器的数据传输压力。判断有没有修改的标志有两种。</p><ol><li>ETag/If-Not-Match （http1.1） 对资源生成一个hash值，如果该值，相同就说明资源未修改。</li><li>Last-Modified/If-Modified-Since（http1.0） 记录上次修改资源的系统时间，时间相同就认为未修改。</li></ol><p>不难发现，ETag/If-Not-Match可以更加精确的记录资源有没有被修改。但是hash值得计算会导致一定的性能消耗。Last-Modified/If-Modified-Since没有性能的消耗，但是不能精确到一秒内的资源修改。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTTP缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文搞定offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight</title>
      <link href="/2022/05/26/yi-wen-gao-ding-offsettop-offsetleft-offsetwidth-offsetheight-scrolltop-scrollleft-scrollwidth-scrollheight-clienttop-clientleft-clientwidth-clientheight/"/>
      <url>/2022/05/26/yi-wen-gao-ding-offsettop-offsetleft-offsetwidth-offsetheight-scrolltop-scrollleft-scrollwidth-scrollheight-clienttop-clientleft-clientwidth-clientheight/</url>
      
        <content type="html"><![CDATA[<h1 id="一文搞定offsetTop、offsetLeft、-offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight"><a href="#一文搞定offsetTop、offsetLeft、-offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight" class="headerlink" title="一文搞定offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight"></a>一文搞定offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight</h1><h2 id="offsetTop、offsetLeft、-offsetWidth、offsetHeight"><a href="#offsetTop、offsetLeft、-offsetWidth、offsetHeight" class="headerlink" title="offsetTop、offsetLeft、 offsetWidth、offsetHeight"></a>offsetTop、offsetLeft、 offsetWidth、offsetHeight</h2><p>如图：</p><p><img src="/2022/05/26/yi-wen-gao-ding-offsettop-offsetleft-offsetwidth-offsetheight-scrolltop-scrollleft-scrollwidth-scrollheight-clienttop-clientleft-clientwidth-clientheight/1.png"></p><p>offsetTop:  表示Dom元素上边框相对于父盒子的最顶部的距离</p><p>offsetLeft:  表示Dom元素左边框相对于父盒子最左侧的距离</p><p>offsetWidth:  表示Dom元素  左右边框+左右内边距+内容 的和</p><p>offsetHeight:  表示Dom元素  上下边框+上下内边距+内容 的和</p><h2 id="scrollTop、scrollLeft、scrollWidth、scrollHeight"><a href="#scrollTop、scrollLeft、scrollWidth、scrollHeight" class="headerlink" title="scrollTop、scrollLeft、scrollWidth、scrollHeight"></a>scrollTop、scrollLeft、scrollWidth、scrollHeight</h2><p>如图：</p><p><img src="/2022/05/26/yi-wen-gao-ding-offsettop-offsetleft-offsetwidth-offsetheight-scrolltop-scrollleft-scrollwidth-scrollheight-clienttop-clientleft-clientwidth-clientheight/2.png"></p><p>scrollTop:  表示Dom元素上边框相对于整个HTML页面的最顶部的距离</p><p>scrollLeft:  表示Dom元素左边框相对于整个HTML页面最左侧的距离</p><p>scrollWidth:  整个HTML页面的宽度</p><p>scrollHeight:  整个HTML页面的高度</p><h2 id="clientTop、clientLeft、clientWidth、clientHeight"><a href="#clientTop、clientLeft、clientWidth、clientHeight" class="headerlink" title="clientTop、clientLeft、clientWidth、clientHeight"></a>clientTop、clientLeft、clientWidth、clientHeight</h2><p>如图：</p><p><img src="/2022/05/26/yi-wen-gao-ding-offsettop-offsetleft-offsetwidth-offsetheight-scrolltop-scrollleft-scrollwidth-scrollheight-clienttop-clientleft-clientwidth-clientheight/3.png"></p><p>clientTop:  表示Dom元素上边框的值</p><p>clientLeft:  表示Dom元素左边框得值</p><p>clientWidth:  表示Dom元素  左右内边距+内容 的和</p><p>clientHeight:  表示Dom元素  上下内边距+内容 的和</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight这12个值在获取的时候，我们要得到的值是即时计算得到的，这也就意味着浏览器获取这些值的时候要重新计算元素的位置，大小等几何信息，会导致回流（reflow）的产生</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6排序算法之冒泡,选择,插入,希尔,快排,归并</title>
      <link href="/2022/05/12/es6-pai-xu-suan-fa-zhi-mou-pao-xuan-ze-cha-ru-xi-er-kuai-pai-gui-bing/"/>
      <url>/2022/05/12/es6-pai-xu-suan-fa-zhi-mou-pao-xuan-ze-cha-ru-xi-er-kuai-pai-gui-bing/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6排序算法之冒泡-选择-插入-希尔-快排-归并"><a href="#ES6排序算法之冒泡-选择-插入-希尔-快排-归并" class="headerlink" title="ES6排序算法之冒泡,选择,插入,希尔,快排,归并"></a>ES6排序算法之冒泡,选择,插入,希尔,快排,归并</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序，对数组的每一对相邻元素，对比这两个元素，如果前面的元素大于后面的元素，则交换这两个元素，然后对之后的相邻元素重复以上操作，到最后，最大的元素将出现在数组末尾</p><p><img src="/2022/05/12/es6-pai-xu-suan-fa-zhi-mou-pao-xuan-ze-cha-ru-xi-er-kuai-pai-gui-bing/img1.png"></p><p>对未排序的部分重复n次以上操作，就完成了冒泡排序</p><p>算法实现：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">]</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试结果：</p><p><img src="/2022/05/12/es6-pai-xu-suan-fa-zhi-mou-pao-xuan-ze-cha-ru-xi-er-kuai-pai-gui-bing/img2.png"></p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>依次找到未排序的部分的最小值，把它放在最开始的位置。直到所有元素均以排序</p><p><img src="/2022/05/12/es6-pai-xu-suan-fa-zhi-mou-pao-xuan-ze-cha-ru-xi-er-kuai-pai-gui-bing/img3.png"></p><p>算法实现：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> min <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    min <span class="token operator">=</span> i    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        min <span class="token operator">=</span> j      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span>    arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">]</span><span class="token comment">// bubbleSort(arr)</span><span class="token function">selectionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果：</p><p><img src="/2022/05/12/es6-pai-xu-suan-fa-zhi-mou-pao-xuan-ze-cha-ru-xi-er-kuai-pai-gui-bing/img4.png"></p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p><p>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。</p><p><img src="/2022/05/12/es6-pai-xu-suan-fa-zhi-mou-pao-xuan-ze-cha-ru-xi-er-kuai-pai-gui-bing/img5.png"></p><p>算法实现：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> curr <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">let</span> j <span class="token operator">=</span> i        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> curr <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>          j<span class="token operator">--</span>        <span class="token punctuation">&#125;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> curr      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">]</span><span class="token comment">// bubbleSort(arr)</span><span class="token comment">// selectionSort(arr)</span><span class="token function">insertionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果：</p><p><img src="/2022/05/12/es6-pai-xu-suan-fa-zhi-mou-pao-xuan-ze-cha-ru-xi-er-kuai-pai-gui-bing/img6.png"></p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序是对插入排序的优化，采用分而治之的思想提高了插入排序的效率。</p><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录”基本有序”时，再对全体记录进行依次直接插入排序。希尔排序的效率与选择的增量序列有关，我们直接选择最简单的除2序列。</p><p>算法实现：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> gap <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>gap <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> curr <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">let</span> j <span class="token operator">=</span> i      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> gap <span class="token operator">&amp;&amp;</span> curr <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span>        j <span class="token operator">-=</span> gap      <span class="token punctuation">&#125;</span>      arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> curr    <span class="token punctuation">&#125;</span>    gap <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>gap <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">]</span><span class="token comment">// bubbleSort(arr)</span><span class="token comment">// selectionSort(arr)</span><span class="token comment">// insertionSort(arr)</span><span class="token function">shellSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果：</p><p><img src="/2022/05/12/es6-pai-xu-suan-fa-zhi-mou-pao-xuan-ze-cha-ru-xi-er-kuai-pai-gui-bing/img7.png"></p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ol><li>从数列中挑出一个元素，称为 “基准”（pivot）。</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面。</li><li>递归地把小于基准值元素的子数列和大于基准值元素的子数列排序；</li></ol><p><img src="/2022/05/12/es6-pai-xu-suan-fa-zhi-mou-pao-xuan-ze-cha-ru-xi-er-kuai-pai-gui-bing/img9.png"></p><p>这里以第一个元素为基准进行算法实现：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">quick</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">quick</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span>  <span class="token keyword">let</span> start<span class="token operator">=</span>left  <span class="token keyword">let</span> end<span class="token operator">=</span>right  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> pivot <span class="token operator">&amp;&amp;</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      right<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>    arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot <span class="token operator">&amp;&amp;</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      left<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>pivot  <span class="token function">quick</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>start<span class="token punctuation">,</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token function">quick</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">]</span><span class="token comment">// bubbleSort(arr)</span><span class="token comment">// selectionSort(arr)</span><span class="token comment">// insertionSort(arr)</span><span class="token comment">// shellSort(arr)</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果：</p><p><img src="/2022/05/12/es6-pai-xu-suan-fa-zhi-mou-pao-xuan-ze-cha-ru-xi-er-kuai-pai-gui-bing/img8.png"></p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序和核心思想也是分而治之，对于合并长度总和为n的m个有序数组，算法复杂度为O(n)，归并排序就是做了log(n)次的合并长度总和为n的m个有序数组。</p><p><img src="/2022/05/12/es6-pai-xu-suan-fa-zhi-mou-pao-xuan-ze-cha-ru-xi-er-kuai-pai-gui-bing/img10.png"></p><p>算法实现：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> middle<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> left<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>middle<span class="token punctuation">)</span>  <span class="token keyword">let</span> right<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span>right</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>length<span class="token operator">!==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>right<span class="token punctuation">.</span>length<span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>res<span class="token punctuation">,</span><span class="token operator">...</span>left<span class="token punctuation">,</span><span class="token operator">...</span>right<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">]</span><span class="token comment">// bubbleSort(arr)</span><span class="token comment">// selectionSort(arr)</span><span class="token comment">// insertionSort(arr)</span><span class="token comment">// shellSort(arr)</span><span class="token comment">// quickSort(arr)</span><span class="token comment">// alert(arr.join('-'))</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果：</p><p><img src="/2022/05/12/es6-pai-xu-suan-fa-zhi-mou-pao-xuan-ze-cha-ru-xi-er-kuai-pai-gui-bing/img11.png"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6封装图结构</title>
      <link href="/2022/05/07/es6-feng-zhuang-tu-jie-gou/"/>
      <url>/2022/05/07/es6-feng-zhuang-tu-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6封装图结构"><a href="#ES6封装图结构" class="headerlink" title="ES6封装图结构"></a>ES6封装图结构</h1><h2 id="什么是图结构？"><a href="#什么是图结构？" class="headerlink" title="什么是图结构？"></a>什么是图结构？</h2><p>图结构就是顶点与边的集合。</p><p>在现实生活中，也有很多图结构的例子，比如北京市地铁图：</p><p><img src="/2022/05/07/es6-feng-zhuang-tu-jie-gou/img1.png"></p><p>在地铁线路图中，每个站点就是图的顶点，连接站点之间的线路就是边。</p><h2 id="图结构的封装"><a href="#图结构的封装" class="headerlink" title="图结构的封装"></a>图结构的封装</h2><p>图结构的封装会使用字典和队列结构，详情见<a href="http://localhost:4000/2022/05/07/es6-feng-zhuang-zhan-dui-lie-zi-dian/">ES6封装栈,队列,字典 | Paper Plane</a></p><p>我们采用邻接表表示法。</p><p>主要函数如下：</p><p>addVertex(v)：添加节点</p><p>addEdge(v_start, v_end)：添加边</p><p>toString()：转换为字符串</p><p>_BFS(v_start)：广度优先搜索</p><p>_DFS(v_start)：深度优先搜索</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">&#123;</span>      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vertexes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//顶点集合</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//边</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="addVertex-v-函数实现"><a href="#addVertex-v-函数实现" class="headerlink" title="addVertex(v)函数实现"></a>addVertex(v)函数实现</h3><p>如果点已经存在，则返回false，否则，将顶点加入顶点集合，初始化该顶点的邻接表，返回true。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 添加顶点</span>      <span class="token function">addVertex</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vertexes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> v<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vertexes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="addEdge-v-start-v-end-函数实现"><a href="#addEdge-v-start-v-end-函数实现" class="headerlink" title="addEdge(v_start, v_end)函数实现"></a>addEdge(v_start, v_end)函数实现</h3><p>判断判断两个顶点是否都存在，如果有一个顶点不存在，则返回false。反之，判断边是否重复，重复，返回false，不重复，加入边。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//添加边</span>      <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token parameter">v_start<span class="token punctuation">,</span> v_end</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vertexes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> v_start<span class="token punctuation">)</span> flag<span class="token operator">++</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> v_end<span class="token punctuation">)</span> flag<span class="token operator">++</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>v_start<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> v_end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">return</span> <span class="token boolean">false</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>v_start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v_end<span class="token punctuation">)</span>          <span class="token comment">// 无向图</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>v_end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v_start<span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="toString-函数实现"><a href="#toString-函数实现" class="headerlink" title="toString()函数实现"></a>toString()函数实现</h3><p>遍历每个顶点，然后对每个顶点遍历每一条边，将字符串拼接返回</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 转换为字符串</span>      <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vertexes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          str <span class="token operator">=</span> str <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">' -> '</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            str <span class="token operator">+=</span> i <span class="token operator">+</span> <span class="token string">' '</span>          <span class="token punctuation">&#125;</span>          str <span class="token operator">+=</span> <span class="token string">'\n'</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> str      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BFS-v-start-广度优先搜索函数实现"><a href="#BFS-v-start-广度优先搜索函数实现" class="headerlink" title="_BFS(v_start)广度优先搜索函数实现"></a>_BFS(v_start)广度优先搜索函数实现</h3><p>广度优先遍历：先访问开始节点，然后访问与开始节点相连的节点。访问完所有的相连节点后，访问与其相连节点相连的所有节点……直至所有节点都被访问完</p><p>例图（A为开始节点）：</p><p><img src="/2022/05/07/es6-feng-zhuang-tu-jie-gou/img2.png"></p><h4 id="实现原理："><a href="#实现原理：" class="headerlink" title="实现原理："></a>实现原理：</h4><p>首先，我们给每一个顶点一个表示，这里我们给顶点颜色，白色表示该节点未被访问，黑色表示该节点已被访问。</p><p>初始化颜色：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 初始化颜色</span>      <span class="token function">initColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vertexes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          colors<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'white'</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> colors      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>广度优先搜索可以利用队列来实现。实现思路如下：</p><p>1，将初始顶点加入队列，如果队列非空，则循环做以下操作</p><p>2，弹出队列的第一个顶点。然后，如果该顶点为白色，访问该顶点，将与该顶点相连的所有白色的节点加入队列，然后将该顶点置为黑色。如果该顶点为黑色就不做任何操作</p><p>代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 广度优先搜索</span>      <span class="token function">_BFS</span><span class="token punctuation">(</span><span class="token parameter">v_start</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vertexes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> v_start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span>        query<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>v_start<span class="token punctuation">)</span>        <span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> current <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span>current<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'black'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span>current<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'white'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'white'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                query<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// console.log(query.toString());</span>            colors<span class="token punctuation">[</span>current<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'black'</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述图例中对应的运行结果：</p><p><img src="/2022/05/07/es6-feng-zhuang-tu-jie-gou/img3.png"></p><h3 id="DFS-v-start-深度优先搜索函数实现"><a href="#DFS-v-start-深度优先搜索函数实现" class="headerlink" title="_DFS(v_start)深度优先搜索函数实现"></a>_DFS(v_start)深度优先搜索函数实现</h3><p>深度优先搜索：访问初始节点，对初始节点的一个相连节点进行深度优先搜索。</p><p>例图（A为开始节点）：</p><p><img src="/2022/05/07/es6-feng-zhuang-tu-jie-gou/img4.png"></p><h4 id="实现原理：-1"><a href="#实现原理：-1" class="headerlink" title="实现原理："></a>实现原理：</h4><p>首先，与广度优先搜索，我们给每一个顶点一个表示，这里我们给顶点颜色，白色表示该节点未被访问，黑色表示该节点已被访问。</p><p>深度优先搜索可以利用栈来实现。实现思路如下：</p><p>1，将初始顶点加入栈，如果栈非空，则循环做以下操作</p><p>2，弹出栈的第一个顶点。然后，如果该顶点为白色，访问该顶点，将该顶点置为黑色，然后将与该顶点相连的所有白色的节点加入栈。如果该顶点为黑色就不做任何操作。</p><p>当然，我的实现代码是用递归来做的，上述实现原理用栈来解释比较好理解。为什么用递归可以来代替栈呢？很简单，我们很多语言，不只是JavaScript，这些语言底层在实现函数的嵌套调用时，就是用栈来实现的。</p><p>举个栗子，对于如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bbb'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ccc'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>他的底层是这样的：</p><p><img src="/2022/05/07/es6-feng-zhuang-tu-jie-gou/img5.png"></p><p>结果就是这样的：</p><p><img src="/2022/05/07/es6-feng-zhuang-tu-jie-gou/img6.png"></p><p>所以我们的最终代码是这样的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">_DFS</span><span class="token punctuation">(</span><span class="token parameter">v_start</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vertexes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> v_start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dFS</span><span class="token punctuation">(</span>v_start<span class="token punctuation">,</span> colors<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token function">dFS</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> colors</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'white'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>          colors<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'black'</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'white'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dFS</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> colors<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述图例中对应的运行结果：</p><p><img src="/2022/05/07/es6-feng-zhuang-tu-jie-gou/img7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6封装栈,队列,字典</title>
      <link href="/2022/05/07/es6-feng-zhuang-zhan-dui-lie-zi-dian/"/>
      <url>/2022/05/07/es6-feng-zhuang-zhan-dui-lie-zi-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6封装栈-队列-字典"><a href="#ES6封装栈-队列-字典" class="headerlink" title="ES6封装栈,队列,字典"></a>ES6封装栈,队列,字典</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="什么是栈结构？"><a href="#什么是栈结构？" class="headerlink" title="什么是栈结构？"></a>什么是栈结构？</h3><p>栈结构有一个栈顶，所有的操作只能在栈顶进行，栈中的数据时先进后出的(Last in first out,LIFO).</p><p><img src="/2022/05/07/es6-feng-zhuang-zhan-dui-lie-zi-dian/img1.png"></p><h3 id="栈的封装"><a href="#栈的封装" class="headerlink" title="栈的封装"></a>栈的封装</h3><p>栈中的主要方法为：</p><p>push(el):元素入栈</p><p>pop():元素出栈，并返回元素的值</p><p>peek():返回栈顶元素的值</p><p>size():返回栈的大小</p><p>isEmpty():返回栈是否为空</p><p>代码比较简单，就不在赘述了，直接上代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token punctuation">&#123;</span>      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token operator">=</span><span class="token number">0</span>      <span class="token punctuation">&#125;</span>      <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token operator">=</span>el        <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token operator">++</span>      <span class="token punctuation">&#125;</span>      <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token operator">--</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>top      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="什么是队列？"><a href="#什么是队列？" class="headerlink" title="什么是队列？"></a>什么是队列？</h3><p>队列与栈类似，只能在一端进行操作，但是队列的数据时先进先出的(First in first out,FIFO).</p><p><img src="/2022/05/07/es6-feng-zhuang-zhan-dui-lie-zi-dian/img2.png"></p><h3 id="队列的封装"><a href="#队列的封装" class="headerlink" title="队列的封装"></a>队列的封装</h3><p>队列主要包含一下函数：</p><p>enqueue(el):入队列</p><p>dequeue():出队列，并返回元素的值</p><p>front():返回队列的第一个</p><p>isEmpty()：判断队列是否为空</p><p>size():返回队列的长度</p><p>toString():将队列转换为字符串</p><p>同样，代码比较简单，不在赘述：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Query</span><span class="token punctuation">&#123;</span>      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>      <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>      <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>      <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length      <span class="token punctuation">&#125;</span>      <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> str<span class="token operator">=</span><span class="token string">''</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          str<span class="token operator">+=</span>item<span class="token operator">+</span><span class="token string">' '</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> str      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h3 id="什么是字典？"><a href="#什么是字典？" class="headerlink" title="什么是字典？"></a>什么是字典？</h3><p>字典与数组相比，就是使得下标不在是1,2,3……，而是换为具有具体语义的下标。其实里面存储的就是一些键值对。</p><h3 id="字典的封装"><a href="#字典的封装" class="headerlink" title="字典的封装"></a>字典的封装</h3><p>字典主要有以下函数：</p><p>set():添加键值对</p><p>has(key):是否存在该键</p><p>remove(key)：移除键值对</p><p>get(key):根据键获取值</p><p>keys():获取所有的键</p><p>values():获取所有的值</p><p>size():返回字典的长度</p><p>clear():清空字典</p><p>还是不在赘述：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Dictionay</span> <span class="token punctuation">&#123;</span>      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 添加键值对</span>      <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value      <span class="token punctuation">&#125;</span>      <span class="token comment">// 判断是否有某个键</span>      <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 删除键值对</span>      <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1.判断是否存在</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token comment">// 2.删除键值对</span>        <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 根据key去获取value</span>      <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">undefined</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 获取所有的keys</span>      <span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 获取所有的value</span>      <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length      <span class="token punctuation">&#125;</span>      <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 字典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树优化——红黑树</title>
      <link href="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/"/>
      <url>/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉搜索树优化——红黑树"><a href="#二叉搜索树优化——红黑树" class="headerlink" title="二叉搜索树优化——红黑树"></a>二叉搜索树优化——红黑树</h1><h2 id="红黑树的特点"><a href="#红黑树的特点" class="headerlink" title="红黑树的特点"></a>红黑树的特点</h2><p>特性1，所有节点都是黑色或者红色</p><p>特性2，根节点是黑色</p><p>特性3，每个叶子结点都是黑色的空节点（NIL节点）</p><p>特性4，每个红色节点的两个子节点都是黑色（不存在从根节点到叶子节点的路径中出现连续的两个红色节点的情况）</p><p>特性5，从任意节点到其叶子节点的所有路径都包含相同个数的黑色节点</p><p>红黑树的例图：</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img1.png"></p><h3 id="那么问题来了，红黑树是如何通过以上特性来保持相对平衡的呢？"><a href="#那么问题来了，红黑树是如何通过以上特性来保持相对平衡的呢？" class="headerlink" title="那么问题来了，红黑树是如何通过以上特性来保持相对平衡的呢？"></a>那么问题来了，红黑树是如何通过以上特性来保持相对平衡的呢？</h3><p>首先，根据特性1,2,3，我们可以得到以下结论，对于任意从根节点到叶子节点，路径一定是形似这样的：黑——……——黑。</p><p>其次，根据特性5，我们可以发现，如果一颗红黑树中从根节点到叶子节点的路径中，包含的黑色节点为3，那么路径中的最短路径是这样的： 黑——黑——黑。</p><p>然后，根据特性4，我们可以发现，如果一颗红黑树中从根节点到叶子节点的路径中，包含的黑色节点为3，那么路径中的最长路径是这样的： 黑——红——黑——红——黑。</p><p>所以，<strong>对于红黑树而言，最长路径不会超过最短路径的两倍</strong>，这就保证了红黑树的基本平衡（并不是像AVL树一样的完全平衡，但也是可以保证查询操作的基本高效的）。</p><h2 id="红黑树的插入操作"><a href="#红黑树的插入操作" class="headerlink" title="红黑树的插入操作"></a>红黑树的插入操作</h2><h3 id="红黑树插入元素会用到的操作"><a href="#红黑树插入元素会用到的操作" class="headerlink" title="红黑树插入元素会用到的操作"></a>红黑树插入元素会用到的操作</h3><h4 id="变色"><a href="#变色" class="headerlink" title="变色"></a>变色</h4><p>在红黑树中，默认新插入的节点为红色节点。为什么是这样的呢？</p><p>首先，如果插入的节点为黑色，那么无论节点被插入到哪里，都会导致被插入的路径中的黑色节点多了一个，从而违法特性5，导致红黑树要进行变化。</p><p>而插入节点为红色，如果插入位置的父节点为黑色节点，那么就不需要进行任何操作了</p><h4 id="左旋转"><a href="#左旋转" class="headerlink" title="左旋转"></a>左旋转</h4><p>逆时针旋转红黑树的两个节点，使得自己被自己的右子节点取代，自己成为自己右子节点的左子节点。</p><p>图解如下：</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img2.png"></p><h4 id="右旋转"><a href="#右旋转" class="headerlink" title="右旋转"></a>右旋转</h4><p>顺时针旋转红黑树的两个节点，使得自己被自己的左子节点取代，自己成为自己左子节点的右子节点。</p><p>图解如下：</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img3.png"></p><h3 id="红黑树的插入操作-1"><a href="#红黑树的插入操作-1" class="headerlink" title="红黑树的插入操作"></a>红黑树的插入操作</h3><p>我们设N为要插入的节点，P为父节点，U为叔父节点，G为祖父节点</p><h4 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h4><p>当前树为一个空树，将树的根节点指向N，将N节点变色</p><p>图解如下：</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img4.png"></p><h4 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h4><p>将P节点为黑色，将N节点直接插入即可</p><p>图解如下：</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img5.png"></p><h4 id="情况三"><a href="#情况三" class="headerlink" title="情况三"></a>情况三</h4><p>P节点为红色，U节点为红色，G节点为黑色。此时，我们将P节点和U节点变为黑色，将G节点变为红色。</p><p>图解如下：</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img6.png"></p><p>这种情况下可能出现以下问题：</p><p>1，G节点的父节点可能也为红色节点，这时要进行递归操作。</p><p>2，如果递归到根节点，使得根节点变为红色，则直接将根节点变为黑色即可（等同于每条路径黑色节点都加一）。</p><h4 id="情况四"><a href="#情况四" class="headerlink" title="情况四"></a>情况四</h4><p>P节点为红色，U节点为黑色，G节点为黑色，N节点为P节点的左子节点。此时，我们将P节点转换为黑色，G节点转换为红色，以G节点为轴进行右旋转</p><p>图解如下</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img7.png"></p><h4 id="情况五"><a href="#情况五" class="headerlink" title="情况五"></a>情况五</h4><p>P节点为红色，U节点为黑色，G节点为黑色，N节点为P节点的右子节点。此时，我们先以P为轴进行左旋转，然后将以P为根的子树看成新插入的节点。此时就如情况四一样了，进行情况四中的操作</p><p>图解如下</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img8.png"></p><h2 id="插入元素案例"><a href="#插入元素案例" class="headerlink" title="插入元素案例"></a>插入元素案例</h2><p>我们依次向红黑树中插入10,9,8,7,6,5,4,3,2,1来实际体会一下插入操作</p><h4 id="插入10节点"><a href="#插入10节点" class="headerlink" title="插入10节点"></a>插入10节点</h4><p>满足情况一，将10节点插入，然后将10节点变为黑色</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img9.png"></p><h4 id="插入9节点"><a href="#插入9节点" class="headerlink" title="插入9节点"></a>插入9节点</h4><p>满足情况二，直接插入9节点即可</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img10.png"></p><h4 id="插入8节点"><a href="#插入8节点" class="headerlink" title="插入8节点"></a>插入8节点</h4><p>满足情况四，将9节点变为黑色，10节点变为红色，然后右旋转</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img11.png"></p><h4 id="插入7节点"><a href="#插入7节点" class="headerlink" title="插入7节点"></a>插入7节点</h4><p>满足情况三，将8节点和10节点变为黑色，9节点变为红色。发现此时根节点为红色，将根节点变为黑色</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img12.png"></p><h4 id="插入6节点"><a href="#插入6节点" class="headerlink" title="插入6节点"></a>插入6节点</h4><p>满足情况三，将7节点变为黑色，8节点变为红色。然后右旋转</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img13.png"></p><h4 id="插入5节点"><a href="#插入5节点" class="headerlink" title="插入5节点"></a>插入5节点</h4><p>满足情况三，将6节点和8节点变为黑色，7节点变为红色</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img14.png"></p><h4 id="插入4节点"><a href="#插入4节点" class="headerlink" title="插入4节点"></a>插入4节点</h4><p>满足情况四，将5节点变为黑色，6节点变为红色，然后右旋转</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img15.png"></p><h4 id="插入3节点"><a href="#插入3节点" class="headerlink" title="插入3节点"></a>插入3节点</h4><p>满足情况三，将4节点和6节点变为黑色，5节点变为红色。发现5节点的父节点为红色。这时满足情况四，将7节点变为黑色，9节点变为红色，然后右旋转</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img16.png"></p><h4 id="插入2节点"><a href="#插入2节点" class="headerlink" title="插入2节点"></a>插入2节点</h4><p>满足情况四，将3节点变为黑色，4节点变为红色，然后右旋转</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img17.png"></p><h4 id="插入1节点"><a href="#插入1节点" class="headerlink" title="插入1节点"></a>插入1节点</h4><p>满足情况三，将2节点和4节点变为黑色，3节点变为红色。发现3节点的父节点为红色。这时满足情况三，将5节点和9节点变为黑色，7节点变为红色。发现根节点7为红色，直接将7变为黑色</p><p><img src="/2022/05/06/er-cha-sou-suo-shu-you-hua-hong-hei-shu/img18.png"></p><p>现在这颗红黑树的插入操作已经完成了，我们可以发现它符合红黑树的所有特性（省略了NIL节点）。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6封装二叉搜索树（BinarySearchTree）</title>
      <link href="/2022/05/05/es6-feng-zhuang-ping-heng-er-cha-shu-binarysearchtree/"/>
      <url>/2022/05/05/es6-feng-zhuang-ping-heng-er-cha-shu-binarysearchtree/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6封装二叉搜索树（BinarySearchTree）"><a href="#ES6封装二叉搜索树（BinarySearchTree）" class="headerlink" title="ES6封装二叉搜索树（BinarySearchTree）"></a>ES6封装二叉搜索树（BinarySearchTree）</h1><h2 id="初始化我们的二叉搜索树"><a href="#初始化我们的二叉搜索树" class="headerlink" title="初始化我们的二叉搜索树"></a>初始化我们的二叉搜索树</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> value <span class="token comment">//存放数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">//指向左子节点</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">//指向右子节点</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span> <span class="token punctuation">&#123;</span>      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="insert（插入元素）的实现"><a href="#insert（插入元素）的实现" class="headerlink" title="insert（插入元素）的实现"></a>insert（插入元素）的实现</h2><p>插入元素存在两种情况，第一种情况，树为空树，将root指向新节点即可。第二种情况，树不是空树，这里我们采用递归的形式，如果插入的元素值小于当前节点，则往数的左边查找，如果插入的元素值大于当前节点，则往右查找。如果发现节点为空，则将新的节点插入在这里即可。</p><p>实现代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> node        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> node<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> newNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newNode<span class="token punctuation">.</span>data <span class="token operator">&lt;=</span> node<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> newNode          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> newNode          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="search（查找元素）函数的实现"><a href="#search（查找元素）函数的实现" class="headerlink" title="search（查找元素）函数的实现"></a>search（查找元素）函数的实现</h2><p>查找元素与插入元素思路类似，同样采用递归的方式，将要查找的元素与当前节点的值比较，如果当前节点为空，则查找失败，返回false。如果当前节点的值与查找的元素值相等，则查找成功，返回true。如果当前节点的值大于要查找的元素的值，则向当前节点的左子树上查找，反之，去当前节点的右子树上查找。</p><p>代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>            <span class="token function">searchNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>data <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>data <span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="max（最大值节点）和min（最小值节点）函数的实现"><a href="#max（最大值节点）和min（最小值节点）函数的实现" class="headerlink" title="max（最大值节点）和min（最小值节点）函数的实现"></a>max（最大值节点）和min（最小值节点）函数的实现</h2><p>由于二叉搜索树的特点，我们不难发现一颗二叉搜索树的最小值在树的最左边，最大值在树的最右边。以最小值为例，从根节点开始，只要左节点不为空，则将当前节点指向左节点。直到当前节点的左节点为空，此时当前节点就为最小值节点。</p><p>代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root          <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>right          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> current<span class="token punctuation">.</span>data        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>            <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root          <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>left          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> current<span class="token punctuation">.</span>data        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h2><p>二叉树先序遍历规则如下</p><p>（1）访问当前节点</p><p>（2）访问当前节点的左子树</p><p>（3）访问当前节点的右子树</p><p><img src="/2022/05/05/es6-feng-zhuang-ping-heng-er-cha-shu-binarysearchtree/img1.png"></p><p>遍历顺序既是上图中从根节点开始，按照虚线顺序遍历</p><p>实现代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 先序遍历</span>      <span class="token function">preOrderTraverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><p>二叉树中序遍历规则如下</p><p>（1）访问当前节点的左子树</p><p>（2）访问当前节点</p><p>（3）访问当前节点的右子树</p><p><img src="/2022/05/05/es6-feng-zhuang-ping-heng-er-cha-shu-binarysearchtree/img2.png"></p><p>遍历顺序既是上图中从最左边节点开始，按照虚线顺序遍历。</p><p>对于二叉搜索树而言，中序遍历有一显著特点，即遍历结果为<strong>从小到大排序</strong></p><p>实现代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 中序遍历</span>      <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><p>二叉树后序遍历规则如下</p><p>（1）访问当前节点的左子树</p><p>（2）访问当前节点的右子树</p><p>（3）访问当前节点</p><p><img src="/2022/05/05/es6-feng-zhuang-ping-heng-er-cha-shu-binarysearchtree/img3.png"></p><p>遍历顺序既是上图中从最左边节点开始，按照虚线顺序遍历。</p><p>实现代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 后序遍历</span>      <span class="token function">postOrderTeaverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTeaverseNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token function">postOrderTeaverseNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTeaverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTeaverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="remove移除元素函数实现"><a href="#remove移除元素函数实现" class="headerlink" title="remove移除元素函数实现"></a>remove移除元素函数实现</h2><p>移除元素操作是二叉搜索树最复杂的操作。该操作有以下三种情况：</p><p><img src="/2022/05/05/es6-feng-zhuang-ping-heng-er-cha-shu-binarysearchtree/img4.png"></p><p>情况一：删除的节点没有子节点，此时，若该节点为父节点的左子节点，则使父节点的左子节点为空，反之，使父节点的右子节点为空。</p><p>代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token comment">//当前节点</span>        <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">//当前节点的父节点</span>        <span class="token keyword">let</span> isLeftChild <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">//当前节点是否为父节点的左子节点</span>        <span class="token comment">//寻找要删除的节点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>key <span class="token operator">!==</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>          <span class="token punctuation">&#125;</span>          parent <span class="token operator">=</span> current          <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> current<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            isLeftChild <span class="token operator">=</span> <span class="token boolean">true</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>left          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            isLeftChild <span class="token operator">=</span> <span class="token boolean">false</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>right          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 此时current为要删除的节点</span>        <span class="token comment">// 删除的节点为叶子节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">null</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeftChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>情况二：删除的节点有一个子节点，此时，若该节点为父节点的左子节点，则使父节点的左子节点指向要删除节点的子节点。反之，是父节点的右子节点指向要删除节点的子节点。</p><p>代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 删除的节点有一个子节点</span>        <span class="token comment">// 只有左子节点</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">===</span> current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> current<span class="token punctuation">.</span>left          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeftChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              parent<span class="token punctuation">.</span>left <span class="token operator">=</span> current<span class="token punctuation">.</span>left            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>              parent<span class="token punctuation">.</span>right <span class="token operator">=</span> current<span class="token punctuation">.</span>left            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token comment">// 只有右子节点</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">===</span> current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> current<span class="token punctuation">.</span>right          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeftChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              parent<span class="token punctuation">.</span>left <span class="token operator">=</span> current<span class="token punctuation">.</span>right            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>              parent<span class="token punctuation">.</span>right <span class="token operator">=</span> current<span class="token punctuation">.</span>right            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>情况三：删除的节点有两个子节点。此时，我们要用当前节点的<strong>前驱</strong>或者<strong>后继</strong>替换当前节点。</p><p><strong>前驱</strong>：当前节点左子树上最大的节点</p><p><strong>后继</strong>：当前节点右子树上最小的节点</p><p>我们这里用后继节点替换。则需进行以下操作。</p><p>这里又分为两种情况，</p><p>（1）删除节点的后继节点就是删除节点的右节点，此时：</p><p>1、如果删除节点是父节点的左节点，将删除节点的父节点的左节点指向后继节点，反之，将删除节点的父节点的右节点指向后继节点</p><p>2、将后继节点的左子节点指向删除节点的左子节点</p><p>（2）删除节点的后继节点不是删除节点的左节点，此时：</p><p>1、将后继节点的父节点的左子节点指向后继节点的右子节点</p><p>2、将后继节点的右子节点指向删除节点的右子节点</p><p>3、如果删除节点是父节点的左节点，将删除节点的父节点的左节点指向后继节点，反之，将删除节点的父节点的右节点指向后继节点</p><p>4、将后继节点的左子节点指向删除节点的左子节点</p><p>代码如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;获取后继并做相应操作getSuccessor(delnode)&#123;        let parent&#x3D;delnode        let successor&#x3D;delnode        let current&#x3D;delnode.right        while(current!&#x3D;&#x3D;null)&#123;          parent&#x3D;successor          successor&#x3D;current          current&#x3D;current.left        &#125;        &#x2F;&#x2F;删除节点的后继节点不是删除节点的左节点        if(successor!&#x3D;delnode.right)&#123;        &#x2F;&#x2F;将后继节点的父节点的左子节点指向后继节点的右子节点          parent.left&#x3D;successor.right          &#x2F;&#x2F;将后继节点的右子节点指向删除节点的右子节点          successor.right&#x3D;delnode.right        &#125;        return successor      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 有两个子节点        else&#123;          let successor&#x3D;this.getSuccessor(current)          if(this.root&#x3D;&#x3D;&#x3D;current)&#123;            this.root&#x3D;successor           &#125;else if(isLeftChild)&#123;          &#x2F;&#x2F;如果删除节点是父节点的左子节点，将删除节点的父节点的左子节点指向后继节点            parent.left&#x3D;successor          &#125;else&#123;          &#x2F;&#x2F;如果删除节点是父节点的右子节点，将删除节点的父节点的右子节点指向后继节点            parent.right&#x3D;successor          &#125;          &#x2F;&#x2F;将后继节点的左子节点指向删除节点的左子节点          successor.left&#x3D;current.left        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>remove操作完整代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root        <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">let</span> isLeftChild <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>data <span class="token operator">!==</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>          <span class="token punctuation">&#125;</span>          parent <span class="token operator">=</span> current          <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> current<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            isLeftChild <span class="token operator">=</span> <span class="token boolean">true</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>left          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            isLeftChild <span class="token operator">=</span> <span class="token boolean">false</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>right          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 此时current为要删除的节点</span>        <span class="token comment">// 删除的节点为叶子节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">null</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeftChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 删除的节点有一个子节点</span>        <span class="token comment">// 只有左子节点</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">===</span> current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> current<span class="token punctuation">.</span>left          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeftChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              parent<span class="token punctuation">.</span>left <span class="token operator">=</span> current<span class="token punctuation">.</span>left            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>              parent<span class="token punctuation">.</span>right <span class="token operator">=</span> current<span class="token punctuation">.</span>left            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 只有右子节点</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">===</span> current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> current<span class="token punctuation">.</span>right          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeftChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              parent<span class="token punctuation">.</span>left <span class="token operator">=</span> current<span class="token punctuation">.</span>right            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>              parent<span class="token punctuation">.</span>right <span class="token operator">=</span> current<span class="token punctuation">.</span>right            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 有两个子节点</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> successor<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSuccessor</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token operator">===</span>current<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token operator">=</span>successor           <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>isLeftChild<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            parent<span class="token punctuation">.</span>left<span class="token operator">=</span>successor          <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            parent<span class="token punctuation">.</span>right<span class="token operator">=</span>successor          <span class="token punctuation">&#125;</span>          successor<span class="token punctuation">.</span>left<span class="token operator">=</span>current<span class="token punctuation">.</span>left        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>            <span class="token function">getSuccessor</span><span class="token punctuation">(</span><span class="token parameter">delnode</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> parent<span class="token operator">=</span>delnode        <span class="token keyword">let</span> successor<span class="token operator">=</span>delnode        <span class="token keyword">let</span> current<span class="token operator">=</span>delnode<span class="token punctuation">.</span>right        <span class="token keyword">while</span><span class="token punctuation">(</span>current<span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          parent<span class="token operator">=</span>successor          successor<span class="token operator">=</span>current          current<span class="token operator">=</span>current<span class="token punctuation">.</span>left        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>successor<span class="token operator">!=</span>delnode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          parent<span class="token punctuation">.</span>left<span class="token operator">=</span>successor<span class="token punctuation">.</span>right          successor<span class="token punctuation">.</span>right<span class="token operator">=</span>delnode<span class="token punctuation">.</span>right        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> successor      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用中序遍历对remove操作进行验证"><a href="#利用中序遍历对remove操作进行验证" class="headerlink" title="利用中序遍历对remove操作进行验证"></a>利用中序遍历对remove操作进行验证</h3><p>测试代码1：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">binarysearchtree<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>binarysearchtree<span class="token punctuation">.</span><span class="token function">inOrderTraverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试结果1：</p><p><img src="/2022/05/05/es6-feng-zhuang-ping-heng-er-cha-shu-binarysearchtree/img5.png"></p><p>中序遍历仍然为从小到大排序，说明二叉树仍然是二叉搜索树，没有问题</p><p>测试代码2：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// binarysearchtree.remove(9)</span>    binarysearchtree<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    binarysearchtree<span class="token punctuation">.</span><span class="token function">inOrderTraverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试结果2：</p><p><img src="/2022/05/05/es6-feng-zhuang-ping-heng-er-cha-shu-binarysearchtree/img6.png"></p><p>中序遍历仍然为从小到大排序，说明二叉树仍然是二叉搜索树，没有问题</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6封装哈希表（散列表）</title>
      <link href="/2022/05/05/es6-feng-zhuang-ha-xi-biao-san-lie-biao/"/>
      <url>/2022/05/05/es6-feng-zhuang-ha-xi-biao-san-lie-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6封装哈希表（散列表）"><a href="#ES6封装哈希表（散列表）" class="headerlink" title="ES6封装哈希表（散列表）"></a>ES6封装哈希表（散列表）</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文采用JavaScript的ES6语法封装基本的哈希表（包含增、删、改、查、扩容等基本方法）采用链地址法解决哈希冲突的问题。本文中采用幂乘相加再求余的方式（在这里简单使用一下秦九韶算法）求取key值对应的下标值。</p><h2 id="put函数（插入数据）的实现"><a href="#put函数（插入数据）的实现" class="headerlink" title="put函数（插入数据）的实现"></a>put函数（插入数据）的实现</h2><h3 id="初始化类对象"><a href="#初始化类对象" class="headerlink" title="初始化类对象"></a>初始化类对象</h3><p>初始化哈希表，代码如下</p><pre class="line-numbers language-none"><code class="language-none">class HashTable &#123;      constructor() &#123;        this.storage &#x3D; [] &#x2F;&#x2F;存储数据的数组        this.count &#x3D; 0 &#x2F;&#x2F;记录当前数据量        this.limit &#x3D; 7 &#x2F;&#x2F;记录哈希表最大数据量      &#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求取下标值"><a href="#求取下标值" class="headerlink" title="求取下标值"></a>求取下标值</h3><p>这里我们要求输入的key值为一个字符串。采用幂乘相加的方式（即将字符串的每个字符的Ascll码与以该字符的位数为幂127为底的数相乘，然后将每个结果相加）。举个例子，假设当前的哈希表的最大值为7；那么’name‘的对应下标的求法为：（110×127^4+97×127³+109×127²+101×127）%7</p><h4 id="简介秦九韶算法"><a href="#简介秦九韶算法" class="headerlink" title="简介秦九韶算法"></a>简介秦九韶算法</h4><p>例如上述的例子中，如果按正常的求法，在程序中共需要计算乘法4+3+2+1=10次，加法1+1+1=3次。但如果将上述式子转换为（（（（（110×127）+97）×127+109）×127+101）×127）%7的话，在程序中仅需要计算乘法1+1+1+1=4次，加法次数不变。</p><p>将key值抽象为长度为n的话，普通算法共需乘法法n+(n-1)+(n-2)+…+2+1=n*(n+1)/2次，加法n-1次，换算为秦九韶算法的话，共需乘法n次，加法n-1次。如果key值很长，可以大幅度提高程序的运行效率</p><p>代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">hashFunc</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> maxLen</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> hashCode <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment">// 秦九韶算法</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          hashCode <span class="token operator">=</span> <span class="token number">127</span> <span class="token operator">*</span> hashCode <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        hashCode <span class="token operator">=</span> hashCode <span class="token operator">%</span> maxLen        <span class="token keyword">return</span> hashCode      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入数据时存在两种情况，若对应的key值已经存在了，那么修改该key对应的value即可，反之，哈希表中数据加一。</p><p>代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">put</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span>        <span class="token keyword">let</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          bucket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> bucket        <span class="token punctuation">&#125;</span>    <span class="token comment">//判断key值是否已经存在</span>    <span class="token comment">//如果存在，则改变插入操作为修改</span>        <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> bucket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value            flag <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token keyword">break</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//如果不存在</span>    <span class="token comment">//插入数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          bucket<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>          <span class="token comment">//这里是扩容操作</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">*</span> <span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="get（获取数据）方法的实现"><a href="#get（获取数据）方法的实现" class="headerlink" title="get（获取数据）方法的实现"></a>get（获取数据）方法的实现</h2><p>根据key值得到对应的下标值，然后再对应的下标值处确定是否存在一个桶（存储key值对应下标的数组或者链表，这里采用数组），如果没有（即该key值对应的下标处没有数据）则查询失败，返回false，如果有，则判断桶中是否存在该值，存在则返回该值，否则返回false</p><p>代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span>        <span class="token keyword">let</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token comment">// 该下标处没有数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token keyword">null</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> bucket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="remove（删除数据）方法的实现"><a href="#remove（删除数据）方法的实现" class="headerlink" title="remove（删除数据）方法的实现"></a>remove（删除数据）方法的实现</h2><p>根据key值得到对应的下标值，然后再对应的下标值处确定是否存在一个桶（存储key值对应下标的数组或者链表，这里采用数组），如果没有（即该key值对应的下标处没有数据）则查询数据失败，返回false，如果有，则判断桶中是否存在数据的key值和要删除的key值相等，存在则删除桶中的对应数据，哈希表中总数据减少1，并且返回true，否则返回false</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span>        <span class="token keyword">let</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token comment">//数据为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> bucket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            bucket<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">--</span>            <span class="token comment">//这里是对哈希进行的缩小操作</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">*</span> <span class="token number">0.25</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">>=</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrime</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="isEmpty方法和size方法实现"><a href="#isEmpty方法和size方法实现" class="headerlink" title="isEmpty方法和size方法实现"></a>isEmpty方法和size方法实现</h2><p>这两个方法比较简单，代码如下</p><pre class="line-numbers language-none"><code class="language-none">isEmpty() &#123;        return this.count &#x3D;&#x3D;&#x3D; 0&#125;size() &#123;        return this.count&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断质数与扩容函数"><a href="#判断质数与扩容函数" class="headerlink" title="判断质数与扩容函数"></a>判断质数与扩容函数</h2><h3 id="判断质数"><a href="#判断质数" class="headerlink" title="判断质数"></a>判断质数</h3><p>为什么要判断质数呢？研究表明，如果哈希表的最大限制为质数的情况下，通过key求得的下标值会更加的没有数学规律，从而使得哈希表中的数据分布更加的均匀，从而提高哈希表的效率</p><p>判断一个数N是否为质数，只需要判断是否存在一个小于该数N并且大于等于2的数m，使得N%m===0即可，如果存在数m，则该数N不是质数，反之，N是质数</p><p>代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>令m为数N的平方根，不难发现，如果一个数N可以被因式分解，那么其分解成的两个数a和b必然满足一个数小于等于m，另一个数大于等于m，所以，我们的算法可以优化为如下形式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新增一个寻找质数的方法，代码如下</p><pre class="line-numbers language-none"><code class="language-none">getPrime(num)&#123;        while (!this.isPrime(num)) &#123;          num++        &#125;        return num&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，在之前的增加或者删除元素时，我们就可以使用扩容函数来优化哈希表的查找效率。</p><p>增加元素时，添加以下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">*</span> <span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>删除元素时，添加以下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">*</span> <span class="token number">0.25</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">>=</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrime</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6封装双向链表</title>
      <link href="/2022/05/04/es6-feng-zhuang-shuang-xiang-lian-biao/"/>
      <url>/2022/05/04/es6-feng-zhuang-shuang-xiang-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6封装双向链表"><a href="#ES6封装双向链表" class="headerlink" title="ES6封装双向链表"></a>ES6封装双向链表</h1><h2 id="双向链表与单向链表的区别"><a href="#双向链表与单向链表的区别" class="headerlink" title="双向链表与单向链表的区别"></a>双向链表与单向链表的区别</h2><p>之前一篇文章中介绍了单向链表的封装，详情见<a href="https://asoaringfordream.github.io/2022/05/04/es6-feng-zhuang-dan-xiang-lian-biao/">ES6封装单向链表</a></p><p>单向链表中如果想要访问一个节点的前一个节点，只能从头开始查询，而为了方便这一操作，就有了双向链表这一数据结构，本文中的双向链表基于之前封装的单向链表<a href="https://asoaringfordream.github.io/2022/05/04/es6-feng-zhuang-dan-xiang-lian-biao/">ES6封装单向链表</a>继承而来。</p><h2 id="双向链表的实现"><a href="#双向链表的实现" class="headerlink" title="双向链表的实现"></a>双向链表的实现</h2><p>不难发现，基于之前的单向链表做继承之后，只需重新append方法，insert方法，removeAt方法即可</p><h3 id="基本工作初始化"><a href="#基本工作初始化" class="headerlink" title="基本工作初始化"></a>基本工作初始化</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">DoublyNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Doubly_LinkedList</span> <span class="token keyword">extends</span> <span class="token class-name">LinkedList</span> <span class="token punctuation">&#123;</span>      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="append函数重写"><a href="#append函数重写" class="headerlink" title="append函数重写"></a>append函数重写</h3><p>基于之前的append函数，只需在操作时增加对prev指向的操作即可</p><pre class="line-numbers language-none"><code class="language-none">append(value) &#123;        const node &#x3D; new DoublyNode(value)        if (!this.head) &#123;          this.head &#x3D; node          this.last &#x3D; node        &#125; else &#123;          this.last.next &#x3D; node          node.prev &#x3D; this.last          this.last &#x3D; node        &#125;        this.length++      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="insert函数重写"><a href="#insert函数重写" class="headerlink" title="insert函数重写"></a>insert函数重写</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">pos<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 判断位置溢出</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head           <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>prev <span class="token operator">=</span> node           <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node           <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span>         <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span>         <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head         <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           prev <span class="token operator">=</span> current           current <span class="token operator">=</span> current<span class="token punctuation">.</span>next           i<span class="token operator">++</span>         <span class="token punctuation">&#125;</span>         prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node         node<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev         node<span class="token punctuation">.</span>next <span class="token operator">=</span> current         current<span class="token punctuation">.</span>prev <span class="token operator">=</span> node         <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token boolean">true</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="removeAt函数重写"><a href="#removeAt函数重写" class="headerlink" title="removeAt函数重写"></a>removeAt函数重写</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token parameter">pos</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断位置溢出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token operator">=</span><span class="token keyword">null</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span>          <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head          <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            prev <span class="token operator">=</span> current            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next            i<span class="token operator">++</span>          <span class="token punctuation">&#125;</span>          prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next          <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>last <span class="token operator">=</span> prev          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">--</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，双向链表的封装就完成了。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 双向链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6封装单向链表</title>
      <link href="/2022/05/04/es6-feng-zhuang-dan-xiang-lian-biao/"/>
      <url>/2022/05/04/es6-feng-zhuang-dan-xiang-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6封装单向链表"><a href="#ES6封装单向链表" class="headerlink" title="ES6封装单向链表"></a>ES6封装单向链表</h1><h2 id="简介链表与数组的区别"><a href="#简介链表与数组的区别" class="headerlink" title="简介链表与数组的区别"></a>简介链表与数组的区别</h2><h4 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h4><ul><li>在内存空间中，数组是连续的一块区域</li><li>数组声明时要声明大小，可能造成空间的浪费，也可能会因为空间不足而作扩容，效率下降</li><li>可以通过下标值来访问数据，随机读取效率较高。</li><li>插入数据和删除数据效率低，从中间或前面进行插入或删除操作时，后面的元素要依次位移，效率低下</li></ul><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><ul><li>在内存中，链表中的元素可以不是连续的</li><li>每个数据中都存储了下一个数据的位置，可以通过上一个元素查询下一个元素</li><li>增加删除数据变得简单</li><li>没有下标值，查询必须从头开始查，查询效率低下</li><li>无需指定大小，随意更改长度</li></ul><h4 id="两者不同操作的时间复杂度"><a href="#两者不同操作的时间复杂度" class="headerlink" title="两者不同操作的时间复杂度"></a>两者不同操作的时间复杂度</h4><table><thead><tr><th>操作</th><th>数组</th><th>链表</th></tr></thead><tbody><tr><td>读取</td><td>O(1)</td><td>O(n)</td></tr><tr><td>插入</td><td>O(n)</td><td>O(1)</td></tr><tr><td>删除</td><td>O(n)</td><td>O(1)</td></tr></tbody></table><h2 id="ES6实现单链表"><a href="#ES6实现单链表" class="headerlink" title="ES6实现单链表"></a>ES6实现单链表</h2><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>一般单向链表需要实现以下基本方法</p><ul><li>append(value) 在最后追加元素</li><li>insert(pos, value) 在指定位置插入元素</li><li>get(pos) 获取指定位置元素的值</li><li>indexOf(value) 获取指定值的元素的位置</li><li>update(pos, value) 更新指定元素的值</li><li>removeAt(pos) 删除指定位置的元素</li><li>remove(value) 删除指定值的元素</li><li>isEmpty() 判断链表是否为空</li><li>size() 返回链表的长度</li></ul><h4 id="初始化Node和链表"><a href="#初始化Node和链表" class="headerlink" title="初始化Node和链表"></a>初始化Node和链表</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> item        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">LinkedList</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="append-方法实现"><a href="#append-方法实现" class="headerlink" title="append()方法实现"></a>append()方法实现</h4><p>append追加元素有两种情况，1，链表为空。2，链表不为空</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">append</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node          <span class="token keyword">this</span><span class="token punctuation">.</span>last <span class="token operator">=</span> node        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token punctuation">.</span>next <span class="token operator">=</span> node          <span class="token keyword">this</span><span class="token punctuation">.</span>last <span class="token operator">=</span> node        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="insert-方法实现"><a href="#insert-方法实现" class="headerlink" title="insert()方法实现"></a>insert()方法实现</h4><p>insert插入元素时存在三种情况，1，向链表最前面插入。2，向链表尾部插入，直接调用append()方法即可。3，向链表中间插入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">pos<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断位置溢出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head            <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node            <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span>          <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head          <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            prev <span class="token operator">=</span> current            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next            i<span class="token operator">++</span>          <span class="token punctuation">&#125;</span>          prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node          node<span class="token punctuation">.</span>next <span class="token operator">=</span> current          <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="get方法实现"><a href="#get方法实现" class="headerlink" title="get方法实现"></a>get方法实现</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断位置溢出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          current <span class="token operator">=</span> current<span class="token punctuation">.</span>next          i<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> current<span class="token punctuation">.</span>item      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="indexOf方法实现"><a href="#indexOf方法实现" class="headerlink" title="indexOf方法实现"></a>indexOf方法实现</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>item <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> i          <span class="token punctuation">&#125;</span>          current <span class="token operator">=</span> current<span class="token punctuation">.</span>next          i<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="removeAt方法实现"><a href="#removeAt方法实现" class="headerlink" title="removeAt方法实现"></a>removeAt方法实现</h4><p>removeAt方法与insert方法一样，存在三种情况：1，从开始移除。2，从最后移除。3，从中间移除</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token parameter">pos</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断位置溢出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span>          <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head          <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            prev <span class="token operator">=</span> current            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next            i<span class="token operator">++</span>          <span class="token punctuation">&#125;</span>          prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next          <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>last <span class="token operator">=</span> prev          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">--</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="update方法实现"><a href="#update方法实现" class="headerlink" title="update方法实现"></a>update方法实现</h4><p>update方法直接调用 removeAt方法和insert方法即可完成</p><pre class="line-numbers language-none"><code class="language-none">update(pos, value) &#123;        let res_remove &#x3D; this.removeAt(pos)        let res_insert &#x3D; this.insert(pos, value)        return res_remove &amp;&amp; res_insert      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="remove方法实现"><a href="#remove方法实现" class="headerlink" title="remove方法实现"></a>remove方法实现</h4><p>remove方法直接调用 indexOf方法和removeAt方法即可完成</p><pre class="line-numbers language-none"><code class="language-none">remove(value) &#123;        let index&#x3D;this.indexOf(value)        return this.removeAt(index)      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="isEmpty和size方法实现"><a href="#isEmpty和size方法实现" class="headerlink" title="isEmpty和size方法实现"></a>isEmpty和size方法实现</h4><p>这两个方法实现比较简单，代码如下</p><pre class="line-numbers language-none"><code class="language-none">isEmpty() &#123;        return this.length &#x3D;&#x3D;&#x3D; 0      &#125;size() &#123;        return this.length      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class="line-numbers language-none"><code class="language-none">class Node &#123;      constructor(item) &#123;        this.item &#x3D; item        this.next &#x3D; null      &#125;    &#125;    class LinkedList &#123;      constructor() &#123;        this.head &#x3D; null        this.last &#x3D; null        this.length &#x3D; 0      &#125;      append(value) &#123;        const node &#x3D; new Node(value)        if (!this.head) &#123;          this.head &#x3D; node          this.last &#x3D; node        &#125; else &#123;          this.last.next &#x3D; node          this.last &#x3D; node        &#125;        this.length++      &#125;      insert(pos, value) &#123;        &#x2F;&#x2F; 判断位置溢出        if (pos &lt; 0 || pos &gt; this.length) &#123;          return false        &#125;        const node &#x3D; new Node(value)        if (pos &#x3D;&#x3D;&#x3D; 0) &#123;          node.next &#x3D; this.head          this.head &#x3D; node          this.length++        &#125; else if (pos &#x3D;&#x3D;&#x3D; this.length) &#123;          this.append(value)        &#125; else &#123;          let prev &#x3D; null          let current &#x3D; this.head          let i &#x3D; 0          while (i &lt; pos) &#123;            prev &#x3D; current            current &#x3D; current.next            i++          &#125;          prev.next &#x3D; node          node.next &#x3D; current          this.length++        &#125;        return true      &#125;      get(pos) &#123;        &#x2F;&#x2F; 判断位置溢出        if (pos &lt; 0 || pos &gt; this.length - 1) &#123;          return false        &#125;        let current &#x3D; this.head        let i &#x3D; 0        while (i &lt; pos) &#123;          current &#x3D; current.next          i++        &#125;        return current.item      &#125;      indexOf(value) &#123;        let current &#x3D; this.head        let i &#x3D; 0        while (i &lt; this.length) &#123;          if (current.item &#x3D;&#x3D;&#x3D; value) &#123;            return i          &#125;          current &#x3D; current.next          i++        &#125;        return -1      &#125;      update(pos, value) &#123;        let res_remove &#x3D; this.removeAt(pos)        let res_insert &#x3D; this.insert(pos, value)        return res_remove &amp;&amp; res_insert      &#125;      removeAt(pos) &#123;        &#x2F;&#x2F; 判断位置溢出        if (pos &lt; 0 || pos &gt; this.length - 1) &#123;          return false        &#125;        if (pos &#x3D;&#x3D;&#x3D; 0) &#123;          this.head &#x3D; this.head.next        &#125; else &#123;          let prev &#x3D; null          let current &#x3D; this.head          let i &#x3D; 0          while (i &lt; pos) &#123;            prev &#x3D; current            current &#x3D; current.next            i++          &#125;          prev.next &#x3D; current.next          if (pos &#x3D;&#x3D;&#x3D; this.length - 1) &#123;            this.last &#x3D; prev          &#125;        &#125;        this.length--        return true      &#125;      remove(value) &#123;        let index&#x3D;this.indexOf(value)        return this.removeAt(index)      &#125;      isEmpty() &#123;        return this.length &#x3D;&#x3D;&#x3D; 0      &#125;      size() &#123;        return this.length      &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 单向链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客发表文章</title>
      <link href="/2022/05/03/hexo-bo-ke-fa-biao-wen-zhang/"/>
      <url>/2022/05/03/hexo-bo-ke-fa-biao-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客发表文章"><a href="#Hexo博客发表文章" class="headerlink" title="Hexo博客发表文章"></a>Hexo博客发表文章</h1><h3 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h3><p>在hexo根目录下输入以下指令：</p><pre class="line-numbers language-none"><code class="language-none">hexo new &#39;文章标题&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="文章-Front-matter"><a href="#文章-Front-matter" class="headerlink" title="文章 Front-matter"></a>文章 Front-matter</h3><table><thead><tr><th>配置项</th><th>默认值</th><th>配置描述</th></tr></thead><tbody><tr><td>title</td><td>Markdown 的文件标题</td><td>文章的标题，官方建议填写</td></tr><tr><td>date</td><td>文件创建的日期</td><td>文章的日期，官方建议填写</td></tr><tr><td>author</td><td>hexo根目录下_config.yml 中的 author</td><td>文章的作者</td></tr><tr><td>img</td><td>featureImages 中的某个值</td><td>文章特征图，推荐使用图床</td></tr><tr><td>top</td><td>true</td><td>推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td>false</td><td>文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td>文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td>true</td><td>是否开启 TOC（文章目录），可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td>mathjax</td><td>false</td><td>是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章最开始的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>reprintPolicy</td><td>主题目录下_config.yml中设置的转载规则</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><p>示例如下：</p><pre class="line-numbers language-none"><code class="language-none">---title: Hexo博客发表文章date: 2018-09-07 09:25:00author: Paper Planeimg: &#x2F;source&#x2F;images&#x2F;img1.jpgtop: truecover: truecoverImg: &#x2F;images&#x2F;1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: Hexo博客发表文章的摘要categories: Hexotags:  - Hexo  - 发表文章---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义文章创建时的模板"><a href="#定义文章创建时的模板" class="headerlink" title="定义文章创建时的模板"></a>定义文章创建时的模板</h3><p>为了新建文章方便，我们可以修改一下hexo博客生成文章时的模板，可以将hexo根目录下的<code>/scaffolds/post.md</code>修改为你希望的模板，示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;author: Paper Planeimg: coverImg: top: falsecover: falsetoc: truemathjax: falsepassword:summary: &#123;&#123; title &#125;&#125;keywords:tags:categories:---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客Matery主题添加valine评论模块</title>
      <link href="/2022/05/03/hexo-bo-ke-matery-zhu-ti-tian-jia-valine-ping-lun-mo-kuai/"/>
      <url>/2022/05/03/hexo-bo-ke-matery-zhu-ti-tian-jia-valine-ping-lun-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客Matery主题添加valine评论模块"><a href="#Hexo博客Matery主题添加valine评论模块" class="headerlink" title="Hexo博客Matery主题添加valine评论模块"></a>Hexo博客Matery主题添加valine评论模块</h1><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>首先在<a href="https://console.leancloud.cn/">LeanCloud</a>官网注册账号（如果已经拥有账号则忽略）</p><p>点击‘创建应用’</p><p><img src="/2022/05/03/hexo-bo-ke-matery-zhu-ti-tian-jia-valine-ping-lun-mo-kuai/img1.png"></p><p>点击设置</p><p><img src="/2022/05/03/hexo-bo-ke-matery-zhu-ti-tian-jia-valine-ping-lun-mo-kuai/img2.png"></p><p>点击‘应用凭证’ 获取AppID，AppKey</p><p><img src="/2022/05/03/hexo-bo-ke-matery-zhu-ti-tian-jia-valine-ping-lun-mo-kuai/img3.png"></p><h3 id="配置valine"><a href="#配置valine" class="headerlink" title="配置valine"></a>配置valine</h3><p>找到主题文件目录下的_config.yml文件 启动valine</p><pre class="line-numbers language-none"><code class="language-none">valine:  enable: true  appId: 你的AppID  appKey: 你的AppKey  notify: false  verify: false  visitor: true  avatar: &#39;mm&#39; # Gravatar style : mm&#x2F;identicon&#x2F;monsterid&#x2F;wavatar&#x2F;retro&#x2F;hide  pageSize: 10  placeholder: &#39;这里是空空如也ヾ(ｏ･ω･)ﾉ&#39; # Comment Box placeholder  background: &#x2F;medias&#x2F;comment_bg.png  coolpushkey: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样你就可以在leanCloud官网中管理自己的评论啦！</p><p><img src="/2022/05/03/hexo-bo-ke-matery-zhu-ti-tian-jia-valine-ping-lun-mo-kuai/img4.png"></p><h3 id="配置valine跟随最新版本"><a href="#配置valine跟随最新版本" class="headerlink" title="配置valine跟随最新版本"></a>配置valine跟随最新版本</h3><p>找到主题文件目录下的_config.yml文件找如下内容并更改</p><p><img src="/2022/05/03/hexo-bo-ke-matery-zhu-ti-tian-jia-valine-ping-lun-mo-kuai/img5.png"></p><p>这样valine就会自动保持最新版啦！</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Matery </tag>
            
            <tag> valine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客的Matery主题的个性化配置</title>
      <link href="/2022/05/02/hexo-bo-ke-de-matery-zhu-ti-de-ge-xing-hua-pei-zhi/"/>
      <url>/2022/05/02/hexo-bo-ke-de-matery-zhu-ti-de-ge-xing-hua-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客的Matery主题的个性化配置"><a href="#Hexo博客的Matery主题的个性化配置" class="headerlink" title="Hexo博客的Matery主题的个性化配置"></a>Hexo博客的Matery主题的个性化配置</h1><h2 id="一、Hexo博客的基本设置"><a href="#一、Hexo博客的基本设置" class="headerlink" title="一、Hexo博客的基本设置"></a>一、Hexo博客的基本设置</h2><h3 id="1-1设置标题与副标题"><a href="#1-1设置标题与副标题" class="headerlink" title="1.1设置标题与副标题"></a>1.1设置标题与副标题</h3><p>在hexo根目录中的_config.yml文件中找到以下内容。其中，title对应网站的标题，subtitle对应副标题，description后面可以加上对网站的一些描述，keywords是网站的关键字，author对应作者的署名，language对应网站的语言，默认值为en。</p><pre class="line-numbers language-none"><code class="language-none"># Sitetitle: Paper Planesubtitle: &#39;Paper Plane&#39;description: &#39;&#39;keywords:author: Paper Plane #博客作者署名 文章没有设置author时的默认值language: zh-CN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2设置主题和绑定git"><a href="#1-2设置主题和绑定git" class="headerlink" title="1.2设置主题和绑定git"></a>1.2设置主题和绑定git</h3><ul><li>下载主题——在根目录中选择进入themes目录下使用 git clone 命令下载主题 格式为 git clone +主题地址 下面以Matery为例</li></ul><pre class="line-numbers language-git" data-language="git"><code class="language-git">git clone https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置主题——仍是在hexo根目录中的_config.yml文件中找到一下内容 将themes改为自己的主题即可</li></ul><pre class="line-numbers language-none"><code class="language-none"># Extensions## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;theme: hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>绑定git仓库——仍是在hexo根目录中的_config.yml文件中 添加以下内容 repo对应自己的git仓库名<strong>注意，仓库名称必须为自己GitHub用户名.github.io的格式</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: https:&#x2F;&#x2F;github.com&#x2F;ASoaringForDream&#x2F;ASoaringForDream.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上传到git——在hexo根目录下执行以下命令即可</li></ul><pre class="line-numbers language-none"><code class="language-none">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3自定义添加插件"><a href="#1-3自定义添加插件" class="headerlink" title="1.3自定义添加插件"></a>1.3自定义添加插件</h3><h4 id="1-3-1代码高亮插件"><a href="#1-3-1代码高亮插件" class="headerlink" title="1.3.1代码高亮插件"></a>1.3.1代码高亮插件</h4><p>​        Matery有自己的代码高亮功能，如果不太喜欢可以自己设置为其他的</p><p>​        在hexo根目录下执行</p><pre class="line-numbers language-none"><code class="language-none">npm i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        在hexo根目录中的_config.yml文件中找到以下内容关闭原有的代码高亮</p><pre class="line-numbers language-none"><code class="language-none">highlight:  enable: false  line_number: true  auto_detect: false  tab_replace: &#39;&#39;  wrap: true  hljs: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        在同一文件中添加一下代码设置自己的高亮</p><pre class="line-numbers language-none"><code class="language-none">prism_plugin:  mode: &#39;preprocess&#39;    # realtime&#x2F;preprocess  theme: &#39;tomorrow&#39;  line_number: false    # default false  custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-2字符统计插件"><a href="#1-3-2字符统计插件" class="headerlink" title="1.3.2字符统计插件"></a>1.3.2字符统计插件</h4><p>​        为文章添加字符统计的插件。</p><p>​        在hexo根目录下执行</p><pre class="line-numbers language-none"><code class="language-none">npm i -S hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        在主题下的_config.yml配置文件中添加以下代码 <strong>在Matery主题中这部分代码已经存在找到并修改为true即可 重复会报错</strong></p><pre class="line-numbers language-none"><code class="language-none">postInfo:  date: true # 发布日期  update: true # 更新日期  wordCount: true # 文章字数统计  totalCount: true # 站点总文章字数  min2read: true # 文章阅读时长  readCount: true # 文章阅读次数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-3搜索功能插件"><a href="#1-3-3搜索功能插件" class="headerlink" title="1.3.3搜索功能插件"></a>1.3.3搜索功能插件</h4><p>​        为博客添加搜索功能</p><p>​        在hexo根目录下执行</p><pre class="line-numbers language-none"><code class="language-none">npm i hexo-generator-search -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        在hexo根目录中的_config.yml文件中添加以下内容</p><pre class="line-numbers language-none"><code class="language-none"># 中文搜索功能search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、Matery主题的个性化配置"><a href="#二、Matery主题的个性化配置" class="headerlink" title="二、Matery主题的个性化配置"></a>二、Matery主题的个性化配置</h2><h3 id="2-1修改主题颜色"><a href="#2-1修改主题颜色" class="headerlink" title="2.1修改主题颜色"></a>2.1修改主题颜色</h3><p>不知道为什么默认的主题颜色是绿色（QAQ）不喜欢的话可以更改它的主题颜色</p><p>在主题文件的 /source/css/matery.css 文件中找到并修改以下内容。vscode的可以通过快捷键Ctrl+F查找（其余软件我没用过可能快捷键都一样）。这里我将背景颜色设置为了浅蓝色，推荐一个渐变色网址 <a href="https://webkul.github.io/coolhue/">Gradient Colors Collection Palette - CoolHue 2.0 (webkul.github.io)</a></p><pre class="line-numbers language-none"><code class="language-none">.bg-color &#123;    background-image: linear-gradient(to right, #90F7EC 0%, #32CCBC 100%);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2修改打赏的二维码"><a href="#2-2修改打赏的二维码" class="headerlink" title="2.2修改打赏的二维码"></a>2.2修改打赏的二维码</h3><p>这里建议将主题文件\source\medias\reward目录下的图片更换为自己的图片就好了，注意名字要和他一致</p><h3 id="2-3修改-banner-图和文章特色图"><a href="#2-3修改-banner-图和文章特色图" class="headerlink" title="2.3修改 banner 图和文章特色图"></a>2.3修改 banner 图和文章特色图</h3><p>在 /source/medias/banner 文件夹中更换你喜欢的 banner 图片，主题代码中是每天动态切换一张。当然你可以修改他的源码，让他变成你自己喜欢切换逻辑，banner 切换的代码位置在 /layout/_partial/bg-cover-content.ejs 文件的 代码中：</p><pre class="line-numbers language-none"><code class="language-none">$(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(&#x2F;medias&#x2F;banner&#x2F;&#39; + new Date().getDay() + &#39;.jpg)&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将其中的getDay()改成getHours()即可变成每小时动态切换</p><h3 id="2-4修改博客中的连接"><a href="#2-4修改博客中的连接" class="headerlink" title="2.4修改博客中的连接"></a>2.4修改博客中的连接</h3><p>​        在主题目录中的_config.yml文件中找到并修改以下内容为自己的连接即可</p><pre class="line-numbers language-none"><code class="language-none">socialLink:  github:  https:&#x2F;&#x2F;github.com&#x2F;ASoaringForDream  email: 210923729@qq.com  facebook: # https:&#x2F;&#x2F;www.facebook.com&#x2F;xxx  twitter: # https:&#x2F;&#x2F;twitter.com&#x2F;xxx  qq: 210923729  weibo: # https:&#x2F;&#x2F;weibo.com&#x2F;xxx  zhihu: # https:&#x2F;&#x2F;www.zhihu.com&#x2F;xxx  rss: false # true、false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5修改博客的背景图片"><a href="#2-5修改博客的背景图片" class="headerlink" title="2.5修改博客的背景图片"></a>2.5修改博客的背景图片</h3><p>​        在主题目录中的_config.yml文件中找到一下内容将false改为true即可</p><pre class="line-numbers language-none"><code class="language-none">background:  enable: true  url: &quot;https:&#x2F;&#x2F;gitee.com&#x2F;marmalade0&#x2F;images&#x2F;blob&#x2F;master&#x2F;www.marmalade.vip&#x2F;24.jpg&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-6开启博客的动态特效"><a href="#2-6开启博客的动态特效" class="headerlink" title="2.6开启博客的动态特效"></a>2.6开启博客的动态特效</h3><p>​        在主题目录中的_config.yml文件中找到一下内容 将自己需要的特效的enable值设置为truej即可</p><pre class="line-numbers language-none"><code class="language-none"># 是否激活点击页面的&#39;爱心&#39;效果，默认激活.clicklove:  enable: true# | 文件名             | 说明                   |# | :----------------- | :--------------------- |# | sakura-small.js    | 少量樱花               |# | sakura-half.js     | 樱花相对原效果数量减半 |# | sakura-reduce.js   | 樱花相对原效果减少1&#x2F;4  |# | sakura.js          | 樱花数量不变（原效果） |# 默认事sakura.js，如需修改，请到下面地址修改# libs#   js:#     sakura: &#x2F;libs&#x2F;others&#x2F;sakura-reduce.js# 是否激活页面樱花效果, 只在桌面版网页启用特效# 下面三种特效建议选择一种就够了，sakura:  enable: false# 是否激活页面鼠标星星跟随效果, 只在桌面版网页启用特效mouseStar:  enable: false  # 是否激活页面飘雪效果, 只在桌面版网页启用特效snowdown:  enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7其他"><a href="#2-7其他" class="headerlink" title="2.7其他"></a>2.7其他</h3><p>​        除此之外，matery还拥有其他的很多配置参数，例如个人信息，个人项目，个人技能，目录菜单，logo等等，君等可以自行修改，配置文件中有作者的大量中文注释，还是非常通俗易懂的，大佬们如果还不满意可以自己动手修改源码，大家可以根据自己的喜好搭建拥有自己风格的博客，我认为这也是个人博客的重要意义之一。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Matery </tag>
            
            <tag> 个性化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
