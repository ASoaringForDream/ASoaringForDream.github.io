<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ES6封装哈希表（散列表）</title>
      <link href="/2022/05/05/es6-feng-zhuang-ha-xi-biao-san-lie-biao/"/>
      <url>/2022/05/05/es6-feng-zhuang-ha-xi-biao-san-lie-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6封装哈希表（散列表）"><a href="#ES6封装哈希表（散列表）" class="headerlink" title="ES6封装哈希表（散列表）"></a>ES6封装哈希表（散列表）</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文采用JavaScript的ES6语法封装基本的哈希表（包含增、删、改、查、扩容等基本方法）采用链地址法解决哈希冲突的问题。本文中采用幂乘相加再求余的方式（在这里简单使用一下秦九韶算法）求取key值对应的下标值。</p><h2 id="put函数（插入数据）的实现"><a href="#put函数（插入数据）的实现" class="headerlink" title="put函数（插入数据）的实现"></a>put函数（插入数据）的实现</h2><h3 id="初始化类对象"><a href="#初始化类对象" class="headerlink" title="初始化类对象"></a>初始化类对象</h3><p>初始化哈希表，代码如下</p><pre class="line-numbers language-none"><code class="language-none">class HashTable &#123;      constructor() &#123;        this.storage &#x3D; [] &#x2F;&#x2F;存储数据的数组        this.count &#x3D; 0 &#x2F;&#x2F;记录当前数据量        this.limit &#x3D; 7 &#x2F;&#x2F;记录哈希表最大数据量      &#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求取下标值"><a href="#求取下标值" class="headerlink" title="求取下标值"></a>求取下标值</h3><p>这里我们要求输入的key值为一个字符串。采用幂乘相加的方式（即将字符串的每个字符的Ascll码与以该字符的位数为幂127为底的数相乘，然后将每个结果相加）。举个例子，假设当前的哈希表的最大值为7；那么’name‘的对应下标的求法为：（110×127^4+97×127³+109×127²+101×127）%7</p><h4 id="简介秦九韶算法"><a href="#简介秦九韶算法" class="headerlink" title="简介秦九韶算法"></a>简介秦九韶算法</h4><p>例如上述的例子中，如果按正常的求法，在程序中共需要计算乘法4+3+2+1=10次，加法1+1+1=3次。但如果将上述式子转换为（（（（（110×127）+97）×127+109）×127+101）×127）%7的话，在程序中仅需要计算乘法1+1+1+1=4次，加法次数不变。</p><p>将key值抽象为长度为n的话，普通算法共需乘法法n+(n-1)+(n-2)+…+2+1=n*(n+1)/2次，加法n-1次，换算为秦九韶算法的话，共需乘法n次，加法n-1次。如果key值很长，可以大幅度提高程序的运行效率</p><p>代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">hashFunc</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> maxLen</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> hashCode <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment">// 秦九韶算法</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          hashCode <span class="token operator">=</span> <span class="token number">127</span> <span class="token operator">*</span> hashCode <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        hashCode <span class="token operator">=</span> hashCode <span class="token operator">%</span> maxLen        <span class="token keyword">return</span> hashCode      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入数据时存在两种情况，若对应的key值已经存在了，那么修改该key对应的value即可，反之，哈希表中数据加一。</p><p>代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">put</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span>        <span class="token keyword">let</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          bucket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> bucket        <span class="token punctuation">&#125;</span>    <span class="token comment">//判断key值是否已经存在</span>    <span class="token comment">//如果存在，则改变插入操作为修改</span>        <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> bucket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value            flag <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token keyword">break</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//如果不存在</span>    <span class="token comment">//插入数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          bucket<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>          <span class="token comment">//这里是扩容操作</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">*</span> <span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="get（获取数据）方法的实现"><a href="#get（获取数据）方法的实现" class="headerlink" title="get（获取数据）方法的实现"></a>get（获取数据）方法的实现</h2><p>根据key值得到对应的下标值，然后再对应的下标值处确定是否存在一个桶（存储key值对应下标的数组或者链表，这里采用数组），如果没有（即该key值对应的下标处没有数据）则查询失败，返回false，如果有，则判断桶中是否存在该值，存在则返回该值，否则返回false</p><p>代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span>        <span class="token keyword">let</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token comment">// 该下标处没有数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token keyword">null</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> bucket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="remove（删除数据）方法的实现"><a href="#remove（删除数据）方法的实现" class="headerlink" title="remove（删除数据）方法的实现"></a>remove（删除数据）方法的实现</h2><p>根据key值得到对应的下标值，然后再对应的下标值处确定是否存在一个桶（存储key值对应下标的数组或者链表，这里采用数组），如果没有（即该key值对应的下标处没有数据）则查询数据失败，返回false，如果有，则判断桶中是否存在数据的key值和要删除的key值相等，存在则删除桶中的对应数据，哈希表中总数据减少1，并且返回true，否则返回false</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span>        <span class="token keyword">let</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token comment">//数据为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> bucket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            bucket<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">--</span>            <span class="token comment">//这里是对哈希进行的缩小操作</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">*</span> <span class="token number">0.25</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">>=</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrime</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="isEmpty方法和size方法实现"><a href="#isEmpty方法和size方法实现" class="headerlink" title="isEmpty方法和size方法实现"></a>isEmpty方法和size方法实现</h2><p>这两个方法比较简单，代码如下</p><pre class="line-numbers language-none"><code class="language-none">isEmpty() &#123;        return this.count &#x3D;&#x3D;&#x3D; 0&#125;size() &#123;        return this.count&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断质数与扩容函数"><a href="#判断质数与扩容函数" class="headerlink" title="判断质数与扩容函数"></a>判断质数与扩容函数</h2><h3 id="判断质数"><a href="#判断质数" class="headerlink" title="判断质数"></a>判断质数</h3><p>为什么要判断质数呢？研究表明，如果哈希表的最大限制为质数的情况下，通过key求得的下标值会更加的没有数学规律，从而使得哈希表中的数据分布更加的均匀，从而提高哈希表的效率</p><p>判断一个数N是否为质数，只需要判断是否存在一个小于该数N并且大于等于2的数m，使得N%m===0即可，如果存在数m，则该数N不是质数，反之，N是质数</p><p>代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>令m为数N的平方根，不难发现，如果一个数N可以被因式分解，那么其分解成的两个数a和b必然满足一个数小于等于m，另一个数大于等于m，所以，我们的算法可以优化为如下形式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新增一个寻找质数的方法，代码如下</p><pre class="line-numbers language-none"><code class="language-none">getPrime(num)&#123;        while (!this.isPrime(num)) &#123;          num++        &#125;        return num&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，在之前的增加或者删除元素时，我们就可以使用扩容函数来优化哈希表的查找效率。</p><p>增加元素时，添加以下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">*</span> <span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>删除元素时，添加以下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">*</span> <span class="token number">0.25</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">>=</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrime</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 双向链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6封装双向链表</title>
      <link href="/2022/05/04/es6-feng-zhuang-shuang-xiang-lian-biao/"/>
      <url>/2022/05/04/es6-feng-zhuang-shuang-xiang-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6封装双向链表"><a href="#ES6封装双向链表" class="headerlink" title="ES6封装双向链表"></a>ES6封装双向链表</h1><h2 id="双向链表与单向链表的区别"><a href="#双向链表与单向链表的区别" class="headerlink" title="双向链表与单向链表的区别"></a>双向链表与单向链表的区别</h2><p>之前一篇文章中介绍了单向链表的封装，详情见<a href="https://asoaringfordream.github.io/2022/05/04/es6-feng-zhuang-dan-xiang-lian-biao/">ES6封装单向链表</a></p><p>单向链表中如果想要访问一个节点的前一个节点，只能从头开始查询，而为了方便这一操作，就有了双向链表这一数据结构，本文中的双向链表基于之前封装的单向链表<a href="https://asoaringfordream.github.io/2022/05/04/es6-feng-zhuang-dan-xiang-lian-biao/">ES6封装单向链表</a>继承而来。</p><h2 id="双向链表的实现"><a href="#双向链表的实现" class="headerlink" title="双向链表的实现"></a>双向链表的实现</h2><p>不难发现，基于之前的单向链表做继承之后，只需重新append方法，insert方法，removeAt方法即可</p><h3 id="基本工作初始化"><a href="#基本工作初始化" class="headerlink" title="基本工作初始化"></a>基本工作初始化</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">DoublyNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Doubly_LinkedList</span> <span class="token keyword">extends</span> <span class="token class-name">LinkedList</span> <span class="token punctuation">&#123;</span>      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="append函数重写"><a href="#append函数重写" class="headerlink" title="append函数重写"></a>append函数重写</h3><p>基于之前的append函数，只需在操作时增加对prev指向的操作即可</p><pre class="line-numbers language-none"><code class="language-none">append(value) &#123;        const node &#x3D; new DoublyNode(value)        if (!this.head) &#123;          this.head &#x3D; node          this.last &#x3D; node        &#125; else &#123;          this.last.next &#x3D; node          node.prev &#x3D; this.last          this.last &#x3D; node        &#125;        this.length++      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="insert函数重写"><a href="#insert函数重写" class="headerlink" title="insert函数重写"></a>insert函数重写</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">pos<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 判断位置溢出</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head           <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>prev <span class="token operator">=</span> node           <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node           <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span>         <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span>         <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head         <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           prev <span class="token operator">=</span> current           current <span class="token operator">=</span> current<span class="token punctuation">.</span>next           i<span class="token operator">++</span>         <span class="token punctuation">&#125;</span>         prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node         node<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev         node<span class="token punctuation">.</span>next <span class="token operator">=</span> current         current<span class="token punctuation">.</span>prev <span class="token operator">=</span> node         <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token boolean">true</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="removeAt函数重写"><a href="#removeAt函数重写" class="headerlink" title="removeAt函数重写"></a>removeAt函数重写</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token parameter">pos</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断位置溢出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token operator">=</span><span class="token keyword">null</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span>          <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head          <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            prev <span class="token operator">=</span> current            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next            i<span class="token operator">++</span>          <span class="token punctuation">&#125;</span>          prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next          <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>last <span class="token operator">=</span> prev          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">--</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，双向链表的封装就完成了。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 双向链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6封装单向链表</title>
      <link href="/2022/05/04/es6-feng-zhuang-dan-xiang-lian-biao/"/>
      <url>/2022/05/04/es6-feng-zhuang-dan-xiang-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6封装单向链表"><a href="#ES6封装单向链表" class="headerlink" title="ES6封装单向链表"></a>ES6封装单向链表</h1><h2 id="简介链表与数组的区别"><a href="#简介链表与数组的区别" class="headerlink" title="简介链表与数组的区别"></a>简介链表与数组的区别</h2><h4 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h4><ul><li>在内存空间中，数组是连续的一块区域</li><li>数组声明时要声明大小，可能造成空间的浪费，也可能会因为空间不足而作扩容，效率下降</li><li>可以通过下标值来访问数据，随机读取效率较高。</li><li>插入数据和删除数据效率低，从中间或前面进行插入或删除操作时，后面的元素要依次位移，效率低下</li></ul><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><ul><li>在内存中，链表中的元素可以不是连续的</li><li>每个数据中都存储了下一个数据的位置，可以通过上一个元素查询下一个元素</li><li>增加删除数据变得简单</li><li>没有下标值，查询必须从头开始查，查询效率低下</li><li>无需指定大小，随意更改长度</li></ul><h4 id="两者不同操作的时间复杂度"><a href="#两者不同操作的时间复杂度" class="headerlink" title="两者不同操作的时间复杂度"></a>两者不同操作的时间复杂度</h4><table><thead><tr><th>操作</th><th>数组</th><th>链表</th></tr></thead><tbody><tr><td>读取</td><td>O(1)</td><td>O(n)</td></tr><tr><td>插入</td><td>O(n)</td><td>O(1)</td></tr><tr><td>删除</td><td>O(n)</td><td>O(1)</td></tr></tbody></table><h2 id="ES6实现单链表"><a href="#ES6实现单链表" class="headerlink" title="ES6实现单链表"></a>ES6实现单链表</h2><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>一般单向链表需要实现以下基本方法</p><ul><li>append(value) 在最后追加元素</li><li>insert(pos, value) 在指定位置插入元素</li><li>get(pos) 获取指定位置元素的值</li><li>indexOf(value) 获取指定值的元素的位置</li><li>update(pos, value) 更新指定元素的值</li><li>removeAt(pos) 删除指定位置的元素</li><li>remove(value) 删除指定值的元素</li><li>isEmpty() 判断链表是否为空</li><li>size() 返回链表的长度</li></ul><h4 id="初始化Node和链表"><a href="#初始化Node和链表" class="headerlink" title="初始化Node和链表"></a>初始化Node和链表</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> item        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">LinkedList</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="append-方法实现"><a href="#append-方法实现" class="headerlink" title="append()方法实现"></a>append()方法实现</h4><p>append追加元素有两种情况，1，链表为空。2，链表不为空</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">append</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node          <span class="token keyword">this</span><span class="token punctuation">.</span>last <span class="token operator">=</span> node        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token punctuation">.</span>next <span class="token operator">=</span> node          <span class="token keyword">this</span><span class="token punctuation">.</span>last <span class="token operator">=</span> node        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="insert-方法实现"><a href="#insert-方法实现" class="headerlink" title="insert()方法实现"></a>insert()方法实现</h4><p>insert插入元素时存在三种情况，1，向链表最前面插入。2，向链表尾部插入，直接调用append()方法即可。3，向链表中间插入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">pos<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断位置溢出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head            <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node            <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span>          <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head          <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            prev <span class="token operator">=</span> current            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next            i<span class="token operator">++</span>          <span class="token punctuation">&#125;</span>          prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node          node<span class="token punctuation">.</span>next <span class="token operator">=</span> current          <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="get方法实现"><a href="#get方法实现" class="headerlink" title="get方法实现"></a>get方法实现</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断位置溢出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          current <span class="token operator">=</span> current<span class="token punctuation">.</span>next          i<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> current<span class="token punctuation">.</span>item      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="indexOf方法实现"><a href="#indexOf方法实现" class="headerlink" title="indexOf方法实现"></a>indexOf方法实现</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>item <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> i          <span class="token punctuation">&#125;</span>          current <span class="token operator">=</span> current<span class="token punctuation">.</span>next          i<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="removeAt方法实现"><a href="#removeAt方法实现" class="headerlink" title="removeAt方法实现"></a>removeAt方法实现</h4><p>removeAt方法与insert方法一样，存在三种情况：1，从开始移除。2，从最后移除。3，从中间移除</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token parameter">pos</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断位置溢出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span>          <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head          <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            prev <span class="token operator">=</span> current            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next            i<span class="token operator">++</span>          <span class="token punctuation">&#125;</span>          prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next          <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>last <span class="token operator">=</span> prev          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">--</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="update方法实现"><a href="#update方法实现" class="headerlink" title="update方法实现"></a>update方法实现</h4><p>update方法直接调用 removeAt方法和insert方法即可完成</p><pre class="line-numbers language-none"><code class="language-none">update(pos, value) &#123;        let res_remove &#x3D; this.removeAt(pos)        let res_insert &#x3D; this.insert(pos, value)        return res_remove &amp;&amp; res_insert      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="remove方法实现"><a href="#remove方法实现" class="headerlink" title="remove方法实现"></a>remove方法实现</h4><p>remove方法直接调用 indexOf方法和removeAt方法即可完成</p><pre class="line-numbers language-none"><code class="language-none">remove(value) &#123;        let index&#x3D;this.indexOf(value)        return this.removeAt(index)      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="isEmpty和size方法实现"><a href="#isEmpty和size方法实现" class="headerlink" title="isEmpty和size方法实现"></a>isEmpty和size方法实现</h4><p>这两个方法实现比较简单，代码如下</p><pre class="line-numbers language-none"><code class="language-none">isEmpty() &#123;        return this.length &#x3D;&#x3D;&#x3D; 0      &#125;size() &#123;        return this.length      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class="line-numbers language-none"><code class="language-none">class Node &#123;      constructor(item) &#123;        this.item &#x3D; item        this.next &#x3D; null      &#125;    &#125;    class LinkedList &#123;      constructor() &#123;        this.head &#x3D; null        this.last &#x3D; null        this.length &#x3D; 0      &#125;      append(value) &#123;        const node &#x3D; new Node(value)        if (!this.head) &#123;          this.head &#x3D; node          this.last &#x3D; node        &#125; else &#123;          this.last.next &#x3D; node          this.last &#x3D; node        &#125;        this.length++      &#125;      insert(pos, value) &#123;        &#x2F;&#x2F; 判断位置溢出        if (pos &lt; 0 || pos &gt; this.length) &#123;          return false        &#125;        const node &#x3D; new Node(value)        if (pos &#x3D;&#x3D;&#x3D; 0) &#123;          node.next &#x3D; this.head          this.head &#x3D; node          this.length++        &#125; else if (pos &#x3D;&#x3D;&#x3D; this.length) &#123;          this.append(value)        &#125; else &#123;          let prev &#x3D; null          let current &#x3D; this.head          let i &#x3D; 0          while (i &lt; pos) &#123;            prev &#x3D; current            current &#x3D; current.next            i++          &#125;          prev.next &#x3D; node          node.next &#x3D; current          this.length++        &#125;        return true      &#125;      get(pos) &#123;        &#x2F;&#x2F; 判断位置溢出        if (pos &lt; 0 || pos &gt; this.length - 1) &#123;          return false        &#125;        let current &#x3D; this.head        let i &#x3D; 0        while (i &lt; pos) &#123;          current &#x3D; current.next          i++        &#125;        return current.item      &#125;      indexOf(value) &#123;        let current &#x3D; this.head        let i &#x3D; 0        while (i &lt; this.length) &#123;          if (current.item &#x3D;&#x3D;&#x3D; value) &#123;            return i          &#125;          current &#x3D; current.next          i++        &#125;        return -1      &#125;      update(pos, value) &#123;        let res_remove &#x3D; this.removeAt(pos)        let res_insert &#x3D; this.insert(pos, value)        return res_remove &amp;&amp; res_insert      &#125;      removeAt(pos) &#123;        &#x2F;&#x2F; 判断位置溢出        if (pos &lt; 0 || pos &gt; this.length - 1) &#123;          return false        &#125;        if (pos &#x3D;&#x3D;&#x3D; 0) &#123;          this.head &#x3D; this.head.next        &#125; else &#123;          let prev &#x3D; null          let current &#x3D; this.head          let i &#x3D; 0          while (i &lt; pos) &#123;            prev &#x3D; current            current &#x3D; current.next            i++          &#125;          prev.next &#x3D; current.next          if (pos &#x3D;&#x3D;&#x3D; this.length - 1) &#123;            this.last &#x3D; prev          &#125;        &#125;        this.length--        return true      &#125;      remove(value) &#123;        let index&#x3D;this.indexOf(value)        return this.removeAt(index)      &#125;      isEmpty() &#123;        return this.length &#x3D;&#x3D;&#x3D; 0      &#125;      size() &#123;        return this.length      &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 单向链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客发表文章</title>
      <link href="/2022/05/03/hexo-bo-ke-fa-biao-wen-zhang/"/>
      <url>/2022/05/03/hexo-bo-ke-fa-biao-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客发表文章"><a href="#Hexo博客发表文章" class="headerlink" title="Hexo博客发表文章"></a>Hexo博客发表文章</h1><h3 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h3><p>在hexo根目录下输入以下指令：</p><pre class="line-numbers language-none"><code class="language-none">hexo new &#39;文章标题&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="文章-Front-matter"><a href="#文章-Front-matter" class="headerlink" title="文章 Front-matter"></a>文章 Front-matter</h3><table><thead><tr><th>配置项</th><th>默认值</th><th>配置描述</th></tr></thead><tbody><tr><td>title</td><td>Markdown 的文件标题</td><td>文章的标题，官方建议填写</td></tr><tr><td>date</td><td>文件创建的日期</td><td>文章的日期，官方建议填写</td></tr><tr><td>author</td><td>hexo根目录下_config.yml 中的 author</td><td>文章的作者</td></tr><tr><td>img</td><td>featureImages 中的某个值</td><td>文章特征图，推荐使用图床</td></tr><tr><td>top</td><td>true</td><td>推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td>false</td><td>文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td>文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td>true</td><td>是否开启 TOC（文章目录），可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td>mathjax</td><td>false</td><td>是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章最开始的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>reprintPolicy</td><td>主题目录下_config.yml中设置的转载规则</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><p>示例如下：</p><pre class="line-numbers language-none"><code class="language-none">---title: Hexo博客发表文章date: 2018-09-07 09:25:00author: Paper Planeimg: &#x2F;source&#x2F;images&#x2F;img1.jpgtop: truecover: truecoverImg: &#x2F;images&#x2F;1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: Hexo博客发表文章的摘要categories: Hexotags:  - Hexo  - 发表文章---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义文章创建时的模板"><a href="#定义文章创建时的模板" class="headerlink" title="定义文章创建时的模板"></a>定义文章创建时的模板</h3><p>为了新建文章方便，我们可以修改一下hexo博客生成文章时的模板，可以将hexo根目录下的<code>/scaffolds/post.md</code>修改为你希望的模板，示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;author: Paper Planeimg: coverImg: top: falsecover: falsetoc: truemathjax: falsepassword:summary: &#123;&#123; title &#125;&#125;keywords:tags:categories:---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客Matery主题添加valine评论模块</title>
      <link href="/2022/05/03/hexo-bo-ke-matery-zhu-ti-tian-jia-valine-ping-lun-mo-kuai/"/>
      <url>/2022/05/03/hexo-bo-ke-matery-zhu-ti-tian-jia-valine-ping-lun-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客Matery主题添加valine评论模块"><a href="#Hexo博客Matery主题添加valine评论模块" class="headerlink" title="Hexo博客Matery主题添加valine评论模块"></a>Hexo博客Matery主题添加valine评论模块</h1><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>首先在<a href="https://console.leancloud.cn/">LeanCloud</a>官网注册账号（如果已经拥有账号则忽略）</p><p>点击‘创建应用’</p><p><img src="/2022/05/03/hexo-bo-ke-matery-zhu-ti-tian-jia-valine-ping-lun-mo-kuai/img1.png"></p><p>点击设置</p><p><img src="/2022/05/03/hexo-bo-ke-matery-zhu-ti-tian-jia-valine-ping-lun-mo-kuai/img2.png"></p><p>点击‘应用凭证’ 获取AppID，AppKey</p><p><img src="/2022/05/03/hexo-bo-ke-matery-zhu-ti-tian-jia-valine-ping-lun-mo-kuai/img3.png"></p><h3 id="配置valine"><a href="#配置valine" class="headerlink" title="配置valine"></a>配置valine</h3><p>找到主题文件目录下的_config.yml文件 启动valine</p><pre class="line-numbers language-none"><code class="language-none">valine:  enable: true  appId: 你的AppID  appKey: 你的AppKey  notify: false  verify: false  visitor: true  avatar: &#39;mm&#39; # Gravatar style : mm&#x2F;identicon&#x2F;monsterid&#x2F;wavatar&#x2F;retro&#x2F;hide  pageSize: 10  placeholder: &#39;这里是空空如也ヾ(ｏ･ω･)ﾉ&#39; # Comment Box placeholder  background: &#x2F;medias&#x2F;comment_bg.png  coolpushkey: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样你就可以在leanCloud官网中管理自己的评论啦！</p><p><img src="/2022/05/03/hexo-bo-ke-matery-zhu-ti-tian-jia-valine-ping-lun-mo-kuai/img4.png"></p><h3 id="配置valine跟随最新版本"><a href="#配置valine跟随最新版本" class="headerlink" title="配置valine跟随最新版本"></a>配置valine跟随最新版本</h3><p>找到主题文件目录下的_config.yml文件找如下内容并更改</p><p><img src="/2022/05/03/hexo-bo-ke-matery-zhu-ti-tian-jia-valine-ping-lun-mo-kuai/img5.png"></p><p>这样valine就会自动保持最新版啦！</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Matery </tag>
            
            <tag> valine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客的Matery主题的个性化配置</title>
      <link href="/2022/05/02/hexo-bo-ke-de-matery-zhu-ti-de-ge-xing-hua-pei-zhi/"/>
      <url>/2022/05/02/hexo-bo-ke-de-matery-zhu-ti-de-ge-xing-hua-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客的Matery主题的个性化配置"><a href="#Hexo博客的Matery主题的个性化配置" class="headerlink" title="Hexo博客的Matery主题的个性化配置"></a>Hexo博客的Matery主题的个性化配置</h1><h2 id="一、Hexo博客的基本设置"><a href="#一、Hexo博客的基本设置" class="headerlink" title="一、Hexo博客的基本设置"></a>一、Hexo博客的基本设置</h2><h3 id="1-1设置标题与副标题"><a href="#1-1设置标题与副标题" class="headerlink" title="1.1设置标题与副标题"></a>1.1设置标题与副标题</h3><p>在hexo根目录中的_config.yml文件中找到以下内容。其中，title对应网站的标题，subtitle对应副标题，description后面可以加上对网站的一些描述，keywords是网站的关键字，author对应作者的署名，language对应网站的语言，默认值为en。</p><pre class="line-numbers language-none"><code class="language-none"># Sitetitle: Paper Planesubtitle: &#39;Paper Plane&#39;description: &#39;&#39;keywords:author: Paper Plane #博客作者署名 文章没有设置author时的默认值language: zh-CN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2设置主题和绑定git"><a href="#1-2设置主题和绑定git" class="headerlink" title="1.2设置主题和绑定git"></a>1.2设置主题和绑定git</h3><ul><li>下载主题——在根目录中选择进入themes目录下使用 git clone 命令下载主题 格式为 git clone +主题地址 下面以Matery为例</li></ul><pre class="line-numbers language-git" data-language="git"><code class="language-git">git clone https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置主题——仍是在hexo根目录中的_config.yml文件中找到一下内容 将themes改为自己的主题即可</li></ul><pre class="line-numbers language-none"><code class="language-none"># Extensions## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;theme: hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>绑定git仓库——仍是在hexo根目录中的_config.yml文件中 添加以下内容 repo对应自己的git仓库名<strong>注意，仓库名称必须为自己GitHub用户名.github.io的格式</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: https:&#x2F;&#x2F;github.com&#x2F;ASoaringForDream&#x2F;ASoaringForDream.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上传到git——在hexo根目录下执行以下命令即可</li></ul><pre class="line-numbers language-none"><code class="language-none">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3自定义添加插件"><a href="#1-3自定义添加插件" class="headerlink" title="1.3自定义添加插件"></a>1.3自定义添加插件</h3><h4 id="1-3-1代码高亮插件"><a href="#1-3-1代码高亮插件" class="headerlink" title="1.3.1代码高亮插件"></a>1.3.1代码高亮插件</h4><p>​        Matery有自己的代码高亮功能，如果不太喜欢可以自己设置为其他的</p><p>​        在hexo根目录下执行</p><pre class="line-numbers language-none"><code class="language-none">npm i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        在hexo根目录中的_config.yml文件中找到以下内容关闭原有的代码高亮</p><pre class="line-numbers language-none"><code class="language-none">highlight:  enable: false  line_number: true  auto_detect: false  tab_replace: &#39;&#39;  wrap: true  hljs: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        在同一文件中添加一下代码设置自己的高亮</p><pre class="line-numbers language-none"><code class="language-none">prism_plugin:  mode: &#39;preprocess&#39;    # realtime&#x2F;preprocess  theme: &#39;tomorrow&#39;  line_number: false    # default false  custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-2字符统计插件"><a href="#1-3-2字符统计插件" class="headerlink" title="1.3.2字符统计插件"></a>1.3.2字符统计插件</h4><p>​        为文章添加字符统计的插件。</p><p>​        在hexo根目录下执行</p><pre class="line-numbers language-none"><code class="language-none">npm i -S hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        在主题下的_config.yml配置文件中添加以下代码 <strong>在Matery主题中这部分代码已经存在找到并修改为true即可 重复会报错</strong></p><pre class="line-numbers language-none"><code class="language-none">postInfo:  date: true # 发布日期  update: true # 更新日期  wordCount: true # 文章字数统计  totalCount: true # 站点总文章字数  min2read: true # 文章阅读时长  readCount: true # 文章阅读次数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-3搜索功能插件"><a href="#1-3-3搜索功能插件" class="headerlink" title="1.3.3搜索功能插件"></a>1.3.3搜索功能插件</h4><p>​        为博客添加搜索功能</p><p>​        在hexo根目录下执行</p><pre class="line-numbers language-none"><code class="language-none">npm i hexo-generator-search -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        在hexo根目录中的_config.yml文件中添加以下内容</p><pre class="line-numbers language-none"><code class="language-none"># 中文搜索功能search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、Matery主题的个性化配置"><a href="#二、Matery主题的个性化配置" class="headerlink" title="二、Matery主题的个性化配置"></a>二、Matery主题的个性化配置</h2><h3 id="2-1修改主题颜色"><a href="#2-1修改主题颜色" class="headerlink" title="2.1修改主题颜色"></a>2.1修改主题颜色</h3><p>不知道为什么默认的主题颜色是绿色（QAQ）不喜欢的话可以更改它的主题颜色</p><p>在主题文件的 /source/css/matery.css 文件中找到并修改以下内容。vscode的可以通过快捷键Ctrl+F查找（其余软件我没用过可能快捷键都一样）。这里我将背景颜色设置为了浅蓝色，推荐一个渐变色网址 <a href="https://webkul.github.io/coolhue/">Gradient Colors Collection Palette - CoolHue 2.0 (webkul.github.io)</a></p><pre class="line-numbers language-none"><code class="language-none">.bg-color &#123;    background-image: linear-gradient(to right, #90F7EC 0%, #32CCBC 100%);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2修改打赏的二维码"><a href="#2-2修改打赏的二维码" class="headerlink" title="2.2修改打赏的二维码"></a>2.2修改打赏的二维码</h3><p>这里建议将主题文件\source\medias\reward目录下的图片更换为自己的图片就好了，注意名字要和他一致</p><h3 id="2-3修改-banner-图和文章特色图"><a href="#2-3修改-banner-图和文章特色图" class="headerlink" title="2.3修改 banner 图和文章特色图"></a>2.3修改 banner 图和文章特色图</h3><p>在 /source/medias/banner 文件夹中更换你喜欢的 banner 图片，主题代码中是每天动态切换一张。当然你可以修改他的源码，让他变成你自己喜欢切换逻辑，banner 切换的代码位置在 /layout/_partial/bg-cover-content.ejs 文件的 代码中：</p><pre class="line-numbers language-none"><code class="language-none">$(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(&#x2F;medias&#x2F;banner&#x2F;&#39; + new Date().getDay() + &#39;.jpg)&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将其中的getDay()改成getHours()即可变成每小时动态切换</p><h3 id="2-4修改博客中的连接"><a href="#2-4修改博客中的连接" class="headerlink" title="2.4修改博客中的连接"></a>2.4修改博客中的连接</h3><p>​        在主题目录中的_config.yml文件中找到并修改以下内容为自己的连接即可</p><pre class="line-numbers language-none"><code class="language-none">socialLink:  github:  https:&#x2F;&#x2F;github.com&#x2F;ASoaringForDream  email: 210923729@qq.com  facebook: # https:&#x2F;&#x2F;www.facebook.com&#x2F;xxx  twitter: # https:&#x2F;&#x2F;twitter.com&#x2F;xxx  qq: 210923729  weibo: # https:&#x2F;&#x2F;weibo.com&#x2F;xxx  zhihu: # https:&#x2F;&#x2F;www.zhihu.com&#x2F;xxx  rss: false # true、false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5修改博客的背景图片"><a href="#2-5修改博客的背景图片" class="headerlink" title="2.5修改博客的背景图片"></a>2.5修改博客的背景图片</h3><p>​        在主题目录中的_config.yml文件中找到一下内容将false改为true即可</p><pre class="line-numbers language-none"><code class="language-none">background:  enable: true  url: &quot;https:&#x2F;&#x2F;gitee.com&#x2F;marmalade0&#x2F;images&#x2F;blob&#x2F;master&#x2F;www.marmalade.vip&#x2F;24.jpg&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-6开启博客的动态特效"><a href="#2-6开启博客的动态特效" class="headerlink" title="2.6开启博客的动态特效"></a>2.6开启博客的动态特效</h3><p>​        在主题目录中的_config.yml文件中找到一下内容 将自己需要的特效的enable值设置为truej即可</p><pre class="line-numbers language-none"><code class="language-none"># 是否激活点击页面的&#39;爱心&#39;效果，默认激活.clicklove:  enable: true# | 文件名             | 说明                   |# | :----------------- | :--------------------- |# | sakura-small.js    | 少量樱花               |# | sakura-half.js     | 樱花相对原效果数量减半 |# | sakura-reduce.js   | 樱花相对原效果减少1&#x2F;4  |# | sakura.js          | 樱花数量不变（原效果） |# 默认事sakura.js，如需修改，请到下面地址修改# libs#   js:#     sakura: &#x2F;libs&#x2F;others&#x2F;sakura-reduce.js# 是否激活页面樱花效果, 只在桌面版网页启用特效# 下面三种特效建议选择一种就够了，sakura:  enable: false# 是否激活页面鼠标星星跟随效果, 只在桌面版网页启用特效mouseStar:  enable: false  # 是否激活页面飘雪效果, 只在桌面版网页启用特效snowdown:  enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7其他"><a href="#2-7其他" class="headerlink" title="2.7其他"></a>2.7其他</h3><p>​        除此之外，matery还拥有其他的很多配置参数，例如个人信息，个人项目，个人技能，目录菜单，logo等等，君等可以自行修改，配置文件中有作者的大量中文注释，还是非常通俗易懂的，大佬们如果还不满意可以自己动手修改源码，大家可以根据自己的喜好搭建拥有自己风格的博客，我认为这也是个人博客的重要意义之一。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Matery </tag>
            
            <tag> 个性化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
